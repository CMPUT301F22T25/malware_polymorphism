package com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.UI;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModel;

import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.Recipe;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.usecases.GetRecipeListUseCase;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import dagger.hilt.android.lifecycle.HiltViewModel;

@HiltViewModel
public class RecipeViewModel extends ViewModel {
    MutableLiveData<List<Recipe>> UIState;
    LiveData<List<Recipe>> liveRecipeList;
    Observer<List<Recipe>> liveRepositoryDataObserver;

    @Inject
    RecipeViewModel(GetRecipeListUseCase getRecipeListUseCase) {
        UIState = new MutableLiveData<>(new ArrayList<>());
        liveRecipeList = getRecipeListUseCase.execute();

        liveRepositoryDataObserver = recipes -> {
            List<Recipe> currentRecipes = new ArrayList<>(recipes);
            // TODO: Insert the sort logic here.
            UIState.postValue(currentRecipes);
        };
        liveRecipeList.observeForever(liveRepositoryDataObserver);

    }

    @Override
    protected void onCleared() {
        super.onCleared();
        liveRecipeList.removeObserver(liveRepositoryDataObserver);
    }

    LiveData<List<Recipe>> getLiveRecipeList() {
        return UIState;
    }
}
