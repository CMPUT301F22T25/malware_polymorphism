package com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.data;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.Ingredient;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;
import com.CMPUT301F22T25.malwarepolymorphism.features.shoppinglist.domain.data.ShoppingListRepository;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.ListenerRegistration;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

/**
 * implements the firebase for the ingredients data storage
 */
public class FirebaseIngredientRepository implements IngredientRepository{
    final FirebaseFirestore database;
    final CollectionReference ingredientCollectionReference;
    private final MutableLiveData<List<Ingredient>> liveIngredientData;

    final ShoppingListRepository shoppingListRepository;

    ListenerRegistration registration;

    @Inject
    /**
     * initialize the firebase
     */
    public FirebaseIngredientRepository(ShoppingListRepository shoppingListRepository) {
        this.shoppingListRepository = shoppingListRepository;
        liveIngredientData = new MutableLiveData<>(new ArrayList<>());
        database = FirebaseFirestore.getInstance();
        ingredientCollectionReference = database.collection("IngredientRepository");

        registration = ingredientCollectionReference.addSnapshotListener( (queryDocumentSnapshots, error) -> {
            if (queryDocumentSnapshots == null)
                return;

            List<Ingredient> ingredients = liveIngredientData.getValue();
            assert ingredients != null;
            ingredients.clear();
            for (QueryDocumentSnapshot doc : queryDocumentSnapshots)
                ingredients.add(Ingredient.fromDocument(doc));

            liveIngredientData.postValue(ingredients);
        });
    }

    @Override
    /**
     * update data for ingredient accordingly
     */
    public LiveData<List<Ingredient>> getIngredientsList() {
        return liveIngredientData;
    }

    @Override
    /**
     * adding new ingredient and updating it in firebase accordingly
     */
    public void addIngredient(IngredientAttributeBundle ingredientBundle) {
        DocumentReference ingredientDoc = ingredientCollectionReference.document();
        shoppingListRepository.addIngredient(ingredientBundle.toRecipeIngredient());
        ingredientDoc.set(ingredientBundle.toHashMap());
    }

    @Override
    /**
     * editing exiting ingredient and updating it in firebase accordingly
     */
    public void modifyIngredient(String id, IngredientAttributeBundle modified) {
        Ingredient ingredient = getIngredient(id);
        shoppingListRepository.modifyIngredient(
                RecipeIngredientMember.fromIngredient(ingredient), modified.toRecipeIngredient());

        DocumentReference ingredientDoc = ingredientCollectionReference.document(id);
        ingredientDoc.update(modified.toHashMap());
    }

    @Override
    /**
     * sorting existing ingredient and updating it in firebase accordingly
     */
    public void sortIngredientsBy(String sortByField) {
        registration.remove();
        registration = ingredientCollectionReference.orderBy(sortByField).addSnapshotListener((value, error) -> {
            if (value == null)
                return;
            List<Ingredient> ingredients = liveIngredientData.getValue();
            assert ingredients != null;
            ingredients.clear();
            for (QueryDocumentSnapshot doc : value)
                ingredients.add(Ingredient.fromDocument(doc));

            liveIngredientData.postValue(ingredients);
        });
    }

    @Override
    /**
     * deleting existing ingredient and updating it in firebase accordingly
     */
    public void deleteIngredient(String id) {
        Ingredient ingredient = getIngredient(id);
        shoppingListRepository.removeIngredient(RecipeIngredientMember.fromIngredient(ingredient));
        ingredientCollectionReference
                .document(id)
                .delete();
    }

    @Override
    public Ingredient getIngredient(String id) {
        return liveIngredientData
                .getValue()
                .stream()
                .filter(ingredient -> ingredient.getId().equals(id))
                .findFirst()
                .orElse(null);
    }

    private HashMap<String, Object> getMapFromBundle(IngredientAttributeBundle ingredientBundle){
        return ingredientBundle.toHashMap();
    }
}