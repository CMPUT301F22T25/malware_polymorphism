package com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.UI;

import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;
import androidx.lifecycle.ViewModelStoreOwner;

import android.annotation.SuppressLint;
import android.os.Bundle;

import com.CMPUT301F22T25.malwarepolymorphism.R;
import com.CMPUT301F22T25.malwarepolymorphism.databinding.ActivityEditIngredientBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.Ingredient;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.IngredientLocation;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.usecases.ModifyIngredientUseCase;

import java.time.Instant;
import java.util.Objects;

import javax.inject.Inject;

import dagger.hilt.android.AndroidEntryPoint;


@AndroidEntryPoint
public class EditIngredientActivity extends AppCompatActivity {


    @Inject
    ModifyIngredientUseCase modifyIngredientUseCase;

    @SuppressLint("SetTextI18n")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ActivityEditIngredientBinding binding = ActivityEditIngredientBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        Ingredient selectedIngredient = (Ingredient) getIntent().getExtras().get("ingredient");;
        assert selectedIngredient != null;

        Objects.requireNonNull(binding.descriptionTextField.getEditText()).setText(selectedIngredient.getDescription());

        binding.locationToggleButton.check(mapLocationToButton(selectedIngredient.getLocation()));

        binding.cancelButton.setOnClickListener(view -> {
            finish();
        });

        binding.saveButton.setOnClickListener(view -> {
            IngredientAttributeBundle bundle = new IngredientAttributeBundle(
                    "TITLE",
                    Objects.requireNonNull(binding.descriptionTextField.getEditText()).getText().toString(),
                    Integer.getInteger(Objects.requireNonNull(binding.amountTextField.getEditText()).getText().toString()),
                    Objects.requireNonNull(binding.unitTextField.getEditText()).getText().toString(),
                    mapIdToLocation(binding.locationToggleButton.getCheckedButtonId()),
                    Instant.now(),
                    Objects.requireNonNull(binding.categoryTextField.getEditText()).getText().toString()
            );
            modifyIngredientUseCase.execute(selectedIngredient, bundle);
            finish();
        });
    }



    private int mapLocationToButton(IngredientLocation location) {
        if (location == IngredientLocation.FREEZER) {
            return R.id.freezer_button;
        }

        if (location == IngredientLocation.PANTRY) {
            return  R.id.pantry_button;
        }

        return R.id.freezer_button;
    }

    private IngredientLocation mapIdToLocation(int id) {
        switch (id) {
            case R.id.freezer_button:
                return IngredientLocation.FREEZER;
            case R.id.fridge_button:
                return IngredientLocation.FRIDGE;
            default:
                return IngredientLocation.PANTRY;
        }
    }
}