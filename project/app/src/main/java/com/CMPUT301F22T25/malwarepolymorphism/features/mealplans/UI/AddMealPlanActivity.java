package com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.UI;

import android.annotation.SuppressLint;
import android.os.Bundle;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContract;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.CMPUT301F22T25.malwarepolymorphism.databinding.ActivityMealPlanAddBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.common.DateFormatter;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.UI.GetIngredientFromStorageActivity;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.data.MealPlanAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.data.MealPlanRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlanRecipeMember;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.UI.EditRecipeIngredientDialog;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.UI.EditRecipeMemberIngredientAdapter;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.UI.GetRecipeActivity;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;
import com.google.android.material.datepicker.MaterialDatePicker;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.atomic.AtomicBoolean;

import javax.inject.Inject;

import dagger.hilt.android.AndroidEntryPoint;

@AndroidEntryPoint
public class AddMealPlanActivity extends AppCompatActivity {

    @Inject
    MealPlanRepository repository;

    @Inject
    DateFormatter dateFormat;

    @Inject
    MaterialDatePicker.Builder<Long> datePickerBuilder;

    List<RecipeIngredientMember> ingredients;
    List<MealPlanRecipeMember> recipes;

    ActivityMealPlanAddBinding binding;
    long currentlySelectedNumberOfServings;
    Instant currentlySelectedDate;

    @SuppressLint("NotifyDataSetChanged")
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Instance variable.
        ingredients = new ArrayList<>();
        recipes = new ArrayList<>();
        AddMealPlanViewModel model = new ViewModelProvider(this).get(AddMealPlanViewModel.class);
        model.setCurrentlySelectedIngredients(new ArrayList<>());
        model.setCurrentlySelectedRecipes(new ArrayList<>());

        // Get ingredient activity setup.
        ActivityResultContract<Integer, RecipeIngredientMember> getIngredientContract =
                new GetIngredientFromStorageActivity.AddIngredientContract();
        ActivityResultLauncher<Integer> getIngredient = registerForActivityResult(
            getIngredientContract, data -> {
                if (data != null)
                    model.addIngredientToSelected(data);
        });

        ActivityResultContract<Integer, MealPlanRecipeMember> getRecipeContract =
                new GetRecipeActivity.ResultContract();
        ActivityResultLauncher<Integer> getRecipe = registerForActivityResult(
                getRecipeContract, data -> {
                    if (data != null)
                        model.addRecipeToSelected(data);
                }
        );

        binding = ActivityMealPlanAddBinding.inflate(getLayoutInflater());


        binding.chooseIngredients.setOnClickListener(v -> {
            getIngredient.launch(0);
        });

        binding.addIngredients.setOnClickListener(v -> new EditRecipeIngredientDialog(
                model::addIngredientToSelected, null, null)
                .show(getFragmentManager(), "NEW"));

        binding.addRecipes.setOnClickListener(v -> getRecipe.launch(0));

        // Ingredients list for the activity.
        LiveData<List<RecipeIngredientMember>> liveIngredients =
                model.getCurrentlySelectedIngredients();
        EditRecipeMemberIngredientAdapter ingredientAdapter = new EditRecipeMemberIngredientAdapter(
                ingredients,
                position -> {
                    EditRecipeIngredientDialog dialog = new EditRecipeIngredientDialog(
                            edited -> {
                                RecipeIngredientMember old = ingredients.get(position);
                                old.setDescription(edited.getDescription());
                                old.setUnit(edited.getUnit());
                                old.setAmount(edited.getAmount());
                                old.setCategory(edited.getCategory());
                                model.forceReload();
                            },
                            model::removeIngredientFromSelected,
                            ingredients.get(position));
                    dialog.show(getFragmentManager(), "EDIT");
                });

        liveIngredients.observe(this, newIngredients -> {
            ingredientAdapter.setIngredients(newIngredients);
            ingredientAdapter.notifyDataSetChanged();
            ingredients = newIngredients;
        });

        binding.ingredientList.setAdapter(ingredientAdapter);
        binding.ingredientList.setLayoutManager(new LinearLayoutManager(this,
                LinearLayoutManager.VERTICAL, false));


        // Recipe list for the activity.
        MealPlanRecipeMemberRecyclerViewAdapter recipeAdapter =
                new MealPlanRecipeMemberRecyclerViewAdapter(recipes, position -> {
                    MealPlanRecipeMember recipe = recipes.get(position);
                    // TODO: Call dialog box to delete and call model.addDeleteRecipe.
                });

        LiveData<List<MealPlanRecipeMember>> liveRecipes = model.getCurrentlySelectedRecipes();
        liveRecipes.observe(this, newRecipes -> {
            recipeAdapter.setRecipes(newRecipes);
            recipeAdapter.notifyDataSetChanged();
            recipes = newRecipes;
        });

        binding.recipeList.setAdapter(recipeAdapter);
        binding.recipeList.setLayoutManager(new LinearLayoutManager(this,
                LinearLayoutManager.VERTICAL, false));
        // Recipe list finished.

        // Add binding for serving slider.
        currentlySelectedNumberOfServings = 2;
        binding.servingsSlider.setValue(currentlySelectedNumberOfServings);
        binding.showServingSizeText.setText(String.valueOf(currentlySelectedNumberOfServings));
        binding.servingsSlider.addOnChangeListener((slider, value, fromUser) -> {
            currentlySelectedNumberOfServings = (long) value;
            binding.showServingSizeText.setText(String.valueOf(currentlySelectedNumberOfServings));
        });

        // Set up date-picker.
        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"), Locale.CANADA);
        currentlySelectedDate = Instant.ofEpochMilli(calendar.getTimeInMillis());
        binding.dateInput.setText(dateFormat.formatDate(currentlySelectedDate));

        // Build the date picker.
        datePickerBuilder.setSelection(currentlySelectedDate.toEpochMilli());
        MaterialDatePicker<Long> picker = datePickerBuilder.build();

        AtomicBoolean isDatePickerOpen = new AtomicBoolean(false);

        picker.addOnPositiveButtonClickListener(selection -> {
            currentlySelectedDate = Instant.ofEpochMilli(selection);
            binding.dateInput.setText(dateFormat.formatDate(currentlySelectedDate));
        });

        picker.addOnDismissListener(dialog -> isDatePickerOpen.set(false));

        binding.dateInput.setOnClickListener(v -> {
            if (isDatePickerOpen.get())
                return;
            isDatePickerOpen.set(true);
            picker.show(getSupportFragmentManager(), "Choose");
        });

        binding.saveButton.setOnClickListener(v -> {
            // TODO: Validation here
            MealPlanAttributeBundle bundle = new MealPlanAttributeBundle(
                    binding.titleTextField.getText().toString(),
                    currentlySelectedNumberOfServings,
                    currentlySelectedDate,
                    recipes,
                    ingredients
            );
            repository.addMealPlan(bundle);
        });

        binding.cancelButton.setOnClickListener(v -> finish());
        setContentView(binding.getRoot());
    }
}
