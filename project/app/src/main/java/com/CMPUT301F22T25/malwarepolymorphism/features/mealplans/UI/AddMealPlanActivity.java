package com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.UI;

import android.annotation.SuppressLint;
import android.os.Bundle;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContract;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.CMPUT301F22T25.malwarepolymorphism.databinding.ActivityMealPlanAddBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.UI.GetIngredientFromStorageActivity;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.data.MealPlanRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlanRecipeMember;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.UI.EditRecipeIngredientDialog;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.UI.EditRecipeMemberIngredientAdapter;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.UI.GetRecipeActivity;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import dagger.hilt.android.AndroidEntryPoint;

@AndroidEntryPoint
public class AddMealPlanActivity extends AppCompatActivity {

    @Inject
    MealPlanRepository repository;

    ActivityMealPlanAddBinding binding;

    List<RecipeIngredientMember> ingredients;
    List<MealPlanRecipeMember> recipes;

    @SuppressLint("NotifyDataSetChanged")
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        ingredients = new ArrayList<>();
        recipes = new ArrayList<>();

        AddMealPlanViewModel model = new ViewModelProvider(this).get(AddMealPlanViewModel.class);

        model.setCurrentlySelectedIngredients(new ArrayList<>());
        model.setCurrentlySelectedRecipes(new ArrayList<>());

        ActivityResultContract<Integer, RecipeIngredientMember> getIngredientContract =
                new GetIngredientFromStorageActivity.AddIngredientContract();

        ActivityResultLauncher<Integer> getIngredient = registerForActivityResult(
            getIngredientContract, data -> {
                if (data == null)
                    return;
                model.addIngredientToSelected(data);
        });

        ActivityResultContract<Integer, MealPlanRecipeMember> getRecipeContract =
                new GetRecipeActivity.ResultContract();

        ActivityResultLauncher<Integer> getRecipe = registerForActivityResult(
                getRecipeContract, data -> {
                    if (data == null)
                        return;
                    model.addRecipeToSelected(data);
                }
        );

        binding = ActivityMealPlanAddBinding.inflate(getLayoutInflater());


        binding.chooseIngredients.setOnClickListener(v -> {
            getIngredient.launch(1);
        });

        binding.addIngredients.setOnClickListener(v -> {
            new EditRecipeIngredientDialog(
                    model::addIngredientToSelected, null, null)
                    .show(getFragmentManager(), "NEW");
        });

        binding.addRecipes.setOnClickListener(v -> {
            getRecipe.launch(1);
        });

        // Ingredients list for the activity.
        LiveData<List<RecipeIngredientMember>> liveIngredients =
                model.getCurrentlySelectedIngredients();

        EditRecipeMemberIngredientAdapter ingredientAdapter = new EditRecipeMemberIngredientAdapter(
                ingredients,
                position -> {
                    EditRecipeIngredientDialog dialog = new EditRecipeIngredientDialog(
                            edited -> {
                                RecipeIngredientMember old = ingredients.get(position);
                                old.setDescription(edited.getDescription());
                                old.setUnit(edited.getUnit());
                                old.setAmount(edited.getAmount());
                                old.setCategory(edited.getCategory());
                                model.forceReload();
                            },
                            model::removeIngredientFromSelected,
                            ingredients.get(position));
                    dialog.show(getFragmentManager(), "EDIT");
                });

        liveIngredients.observe(this, newIngredients -> {
            ingredientAdapter.setIngredients(newIngredients);
            ingredientAdapter.notifyDataSetChanged();
            ingredients = newIngredients;
        });

        binding.ingredientList.setAdapter(ingredientAdapter);
        binding.ingredientList.setLayoutManager(new LinearLayoutManager(this,
                LinearLayoutManager.VERTICAL, false));


        // Recipe list for the activity.

        LiveData<List<MealPlanRecipeMember>> liveRecipes = model.getCurrentlySelectedRecipes();



        liveRecipes.observe(this, newRecipes -> {

        });


        binding.cancelButton.setOnClickListener(v -> finish());
        setContentView(binding.getRoot());
    }
}
