package com.CMPUT301F22T25.malwarepolymorphism;

import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.data.FirebaseIngredientRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.data.FirebaseMealPlanRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.data.MealPlanRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.data.FirebaseRecipeRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.shoppinglist.data.FirebaseShoppingListRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.shoppinglist.domain.data.ShoppingListRepository;
import com.google.android.material.datepicker.CalendarConstraints;
import com.google.android.material.datepicker.DateValidatorPointForward;
import com.google.android.material.datepicker.MaterialDatePicker;

import java.text.DecimalFormat;

import javax.inject.Singleton;

import dagger.Binds;
import dagger.Module;
import dagger.Provides;
import dagger.hilt.InstallIn;
import dagger.hilt.components.SingletonComponent;


@Module
@InstallIn(SingletonComponent.class)
public abstract class HiltModule {

    @Singleton
    @Binds
    public abstract IngredientRepository bindIngredientRepository(FirebaseIngredientRepository impl);

    @Singleton
    @Binds
    public abstract RecipeRepository bindRecipeRepository(FirebaseRecipeRepository impl);

    @Singleton
    @Binds
    public abstract MealPlanRepository bindMeanPlanRepository(FirebaseMealPlanRepository impl);

    @Singleton
    @Binds
    public abstract ShoppingListRepository bindShoppingListRepository(FirebaseShoppingListRepository impl);

    @Provides
    public static MaterialDatePicker.Builder<Long> bindDatePicker() {
        // Set a constraint to allow only dates in the future.
        CalendarConstraints.Builder calendarConstraints =
                new CalendarConstraints.Builder().setValidator(DateValidatorPointForward.now());

        // Build the date picker.
        MaterialDatePicker.Builder<Long> builder = MaterialDatePicker.Builder.datePicker();
        builder.setInputMode(MaterialDatePicker.INPUT_MODE_CALENDAR)
                .setTitleText("Select Best Before Date")
                .setCalendarConstraints(calendarConstraints.build());
        return builder;
    }

    @Provides
    public static DecimalFormat bindFormat() {
        return new DecimalFormat("0.##");
    }
}
