package com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.UI;

import android.annotation.SuppressLint;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.CMPUT301F22T25.malwarepolymorphism.databinding.FragmentIngredientListBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.Ingredient;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.IngredientLocation;

import java.time.Instant;
import java.util.List;

import dagger.hilt.android.AndroidEntryPoint;

@AndroidEntryPoint
public class IngredientListFragment extends Fragment {

    private FragmentIngredientListBinding binding;

    @SuppressLint("NotifyDataSetChanged")
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        binding = FragmentIngredientListBinding.inflate(inflater, container, false);
        IngredientViewModel model = new ViewModelProvider(requireActivity()).get(IngredientViewModel.class);
        binding.addIngredientFab.setOnClickListener(view -> {
            IngredientAttributeBundle bundle = new IngredientAttributeBundle(
                    "New Ingredient",
                    "Descl",
                    10,
                    "Kg",
                    IngredientLocation.FREEZER,
                    Instant.now(),
                    "OWLKITTY"
            );
            Log.d("IVM", "Add button clicked");
            model.addIngredient(bundle);
        });
        LiveData<List<Ingredient>> ingredients = model.getIngredientsLiveData();
        IngredientListRecyclerViewAdapter adapter = new IngredientListRecyclerViewAdapter(ingredients.getValue());
        ingredients.observe(getViewLifecycleOwner(), ingredientsList -> {
            adapter.setIngredients(ingredientsList);
            adapter.notifyDataSetChanged();
        });
        binding.ingredientListRecyclerView.setAdapter(adapter);
        binding.ingredientListRecyclerView.setLayoutManager(new LinearLayoutManager(getContext(),
                LinearLayoutManager.VERTICAL, false));
        return binding.getRoot();
    }
}
