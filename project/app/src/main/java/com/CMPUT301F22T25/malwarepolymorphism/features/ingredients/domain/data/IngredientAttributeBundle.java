package com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data;

import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;

import java.time.Instant;
import java.util.HashMap;


/**
 * IngredientAttributeBundle represents all the information that is needed to add an ingredient to
 * the IngredientRepository.
 */
public class IngredientAttributeBundle {
    private String description;
    private float amount;
    private String unit;
    private String location;
    private Instant bestBefore;
    private String category;

    /**
     * Stores ingredient information
     * @param description gives description of ingredient
     * @param amount gives quantity
     * @param unit unit cost
     * @param location place where ingredient is stored
     * @param bestBefore expiry date
     * @param category of the ingredient
     */
    public IngredientAttributeBundle(String description, float amount, String unit,
                                     String location, Instant bestBefore, String category) {
        this.description = description;
        this.amount = amount;
        this.unit = unit;
        this.location = location;
        this.bestBefore = bestBefore;
        this.category = category;
    }

    /**
     * Returns the ingredient description.
     * @return description
     */
    public String getDescription() {

        return description;
    }

    /**
     * Sets the description of the ingredient that this entity represents.
     * @param description The new description of the ingredient.
     */
    public void setDescription(String description) {

        this.description = description;
    }

    /**
     * Returns the amount of the ingredient that this entity represents.
     * @return amount
     */
    public float getAmount() {

        return amount;
    }


    /**
     * Sets the amount of ingredient that this entity represents.
     * @param amount The new amount for this ingredient.
     */
    public void setAmount(float amount) {

        this.amount = amount;
    }

    /**
     * Returns the unit of the ingredient that this entity represents.
     * @return unit
     */
    public String getUnit() {
        return unit;
    }

    /**
     * Sets the unit of ingredient that this entity represents.
     * @param unit The new unit of this ingredient.
     */
    public void setUnit(String unit) {
        this.unit = unit;
    }

    /**
     * Returns the location where this ingredient is stored.
     * @return location
     */
    public String getLocation() {
        return location;
    }

    /**
     * Sets the location where this ingredient resides.
     * @param location The new location that this ingredient resides in.
     */
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Returns the best before date of the ingredient that this entity represents.
     * @return bestBefore
     */
    public Instant getBestBefore() {
        return bestBefore;
    }

    /**
     * Sets the best before date of the ingredient that this entity represents.
     * @param bestBefore The new best before date of the ingredient.
     */
    public void setBestBefore(Instant bestBefore) {
        this.bestBefore = bestBefore;
    }

    /**
     * Returns the category of the ingredient that this entity represents.
     * @return category
     */
    public String getCategory() {
        return category;
    }

    /**
     * Sets the category of the ingredient that this entity represents.
     * @param category The new category of the ingredient.
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Creates hashmap
     * @return map
     */
    public HashMap<String, Object> toHashMap() {
        HashMap<String, Object> map = new HashMap<>();
        map.put("description", description);
        map.put("amount", amount);
        map.put("unit", unit);
        map.put("location", location);
        map.put("bestBefore", bestBefore.toEpochMilli());
        map.put("category", category);
        return map;
    }

    /**
     *
     * @param map
     * @return IngredientAttributeBundle
     */
    static IngredientAttributeBundle fromHashMap(HashMap<String, Object> map) {
        return new IngredientAttributeBundle(
                (String) map.get("description"),
                (float) map.get("amount"),
                (String) map.get("unit"),
                (String) map.get("location"),
                Instant.ofEpochMilli( (long) map.get("bestBefore")),
                (String) map.get("category")
        );
    }

    public RecipeIngredientMember toRecipeIngredient() {
        return new RecipeIngredientMember(
                description,
                amount,
                unit,
                category
        );
    }
}
