package com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.UI;

import android.provider.Contacts;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.Observer;
import androidx.lifecycle.Transformations;
import androidx.lifecycle.ViewModel;

import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.Ingredient;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;

import javax.inject.Inject;

import dagger.hilt.android.lifecycle.HiltViewModel;

@HiltViewModel
public class IngredientViewModel extends ViewModel {
    private final IngredientRepository repository;
    private final Observer<List<Ingredient>> ingredientListObserver;
    private final MutableLiveData<List<Ingredient>> UIState;
    private final LiveData<List<Ingredient>> ingredientsLiveData;
    private Comparator<Ingredient> currentSortComparator;
    private final Comparator<Ingredient> sortByDescriptionComparator;
    private final Comparator<Ingredient> sortByBestBeforeComparator;
    private final Comparator<Ingredient> sortByLocationComparator;
    private final Comparator<Ingredient> sortByCategoryComparator;


    @Inject
    IngredientViewModel(IngredientRepository repository) {
        // Set up the repository.
        this.repository = repository;
        // Initialize the live data and setup all the comparators.
        UIState = new MutableLiveData<>(new ArrayList<>());

        sortByDescriptionComparator = Comparator.comparing(Ingredient::getDescription);
        sortByCategoryComparator = Comparator.comparing(Ingredient::getCatagory);
        sortByBestBeforeComparator = Comparator.comparing(Ingredient::getBestBefore);
        sortByLocationComparator = Comparator.comparing(Ingredient::getLocation);

        // Sort by description is the default comparator.
        currentSortComparator = sortByDescriptionComparator;

        ingredientListObserver = ingredients -> {
            List<Ingredient> UIStateIngredientsList = new ArrayList<>(ingredients);
            UIStateIngredientsList.sort(currentSortComparator);
            UIState.setValue(UIStateIngredientsList);
        };
        ingredientsLiveData = repository.getIngredientsList();
        ingredientsLiveData.observeForever(ingredientListObserver);
    }

    @Override
    protected void onCleared() {
        super.onCleared();
        ingredientsLiveData.removeObserver(ingredientListObserver);
    }

    public void addIngredient(IngredientAttributeBundle bundle) {
        repository.addIngredient(bundle);
    }

    public void editIngredient(Ingredient old, IngredientAttributeBundle newIngredientBundle) {
        repository.modifyIngredient(old, newIngredientBundle);
    }

    public void deleteIngredient(Ingredient ingredient) {
        repository.deleteIngredient(ingredient);
    }

    private void sortByCurrentComparator() {
        Objects.requireNonNull(UIState.getValue()).sort(currentSortComparator);
    }

    public void sortIngredientListByDescription() {
        currentSortComparator = sortByDescriptionComparator;
        sortByCurrentComparator();
    }

    public void sortIngredientListByBestBeforeData() {
        currentSortComparator = sortByBestBeforeComparator;
        sortByCurrentComparator();
    }

    public void sortIngredientListByCategory() {
        currentSortComparator = sortByCategoryComparator;
        sortByCurrentComparator();
    }

    public void sortIngredientListByLocation() {
        currentSortComparator = sortByLocationComparator;
        sortByCurrentComparator();
    }
}