package com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.UI;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModel;

import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.Ingredient;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.usecases.AddIngredientUseCase;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.usecases.DeleteIngredientUseCase;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.usecases.GetIngredientListUseCase;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.usecases.ModifyIngredientUseCase;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import javax.inject.Inject;

import dagger.hilt.android.lifecycle.HiltViewModel;

@HiltViewModel
public class IngredientViewModel extends ViewModel {
    // Use cases injected by hilt.
    private final AddIngredientUseCase addIngredientUseCase;
    private final DeleteIngredientUseCase deleteIngredientUseCase;
    private final ModifyIngredientUseCase modifyIngredientUseCase;

    // Observes changes in the repository data and updates the UI State.
    private final Observer<List<Ingredient>> ingredientListObserver;

    // The state that the activities observe.
    private final MutableLiveData<List<Ingredient>> UIState;

    // The live data from the repository
    private final LiveData<List<Ingredient>> ingredientsLiveData;

    // The currently selected sorter.
    private Comparator<Ingredient> currentSortComparator;

    // The comparator to use when sorting by description.
    private final Comparator<Ingredient> sortByDescriptionComparator;

    // The comparator to use when sorting by best before date.
    private final Comparator<Ingredient> sortByBestBeforeComparator;

    // The comparator to use when sorting by location.
    private final Comparator<Ingredient> sortByLocationComparator;

    // The comparator to use when sorting by category.
    private final Comparator<Ingredient> sortByCategoryComparator;

    private Ingredient selectedIngredient;


    @Inject
    IngredientViewModel(AddIngredientUseCase addIngredientUseCase,
                        GetIngredientListUseCase getIngredientListUseCase,
                        DeleteIngredientUseCase deleteIngredientUseCase,
                        ModifyIngredientUseCase modifyIngredientUseCase) {
        // Set up the use-cases.
        this.addIngredientUseCase = addIngredientUseCase;
        this.deleteIngredientUseCase = deleteIngredientUseCase;
        this.modifyIngredientUseCase = modifyIngredientUseCase;

        // Initialize the live data and setup all the comparators.
        UIState = new MutableLiveData<>(new ArrayList<>());

        sortByDescriptionComparator = Comparator.comparing(Ingredient::getDescription);
        sortByCategoryComparator = Comparator.comparing(Ingredient::getCategory);
        sortByBestBeforeComparator = Comparator.comparing(Ingredient::getBestBefore);
        sortByLocationComparator = Comparator.comparing(Ingredient::getLocation);

        // Sort by description is the default comparator.
        currentSortComparator = Comparator.comparing(Ingredient::getAmount);

        ingredientListObserver = ingredients -> {
            List<Ingredient> UIStateIngredientsList = new ArrayList<>(ingredients);
            UIStateIngredientsList.sort(currentSortComparator);
            UIState.setValue(UIStateIngredientsList);
        };
        ingredientsLiveData = getIngredientListUseCase.execute();
        ingredientsLiveData.observeForever(ingredientListObserver);
    }

    private void sortByCurrentComparator() {
        List<Ingredient> currentList = UIState.getValue();
        assert currentList != null;
        currentList.sort(currentSortComparator);
        UIState.setValue(currentList);
    }

    public void sortIngredientListByDescription() {
        currentSortComparator = sortByDescriptionComparator;
        sortByCurrentComparator();
    }

    public void sortIngredientListByBestBeforeData() {
        currentSortComparator = sortByBestBeforeComparator;
        sortByCurrentComparator();
    }

    public void sortIngredientListByCategory() {
        currentSortComparator = sortByCategoryComparator;
        sortByCurrentComparator();
    }

    public void sortIngredientListByLocation() {
        currentSortComparator = sortByLocationComparator;
        sortByCurrentComparator();
    }

    public LiveData<List<Ingredient>> getIngredientsLiveData() {
        return UIState;
    }

    @Override
    protected void onCleared() {
        super.onCleared();
        ingredientsLiveData.removeObserver(ingredientListObserver);
    }
}