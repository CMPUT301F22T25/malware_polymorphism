package com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities;


import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.io.Serializable;
import java.time.Instant;
import java.util.HashMap;

/**
 * Represents a single ingredient in the app.
 * To disallow partially formed entities,
 * all the attributes of this entity must be provided through the constructor.
 */
public class Ingredient implements Serializable {
    private final String id;
    private String description;
    private double amount;
    private String unit;
    private String location;
    private Instant bestBefore;
    private String category;

    /**
     * Stores information about the particular ingredient
     * @param id gives ingredient id
     * @param description stores ingredient description
     * @param amount stores the quantity of ingredient
     * @param unit gives the unit of ingredient
     * @param location gives storage location
     * @param bestBefore gives expiry date
     * @param category gives details about the category
     */
    public Ingredient(String id, String description, double amount, String unit,
                      String location, Instant bestBefore, String category) {
        this.id = id;
        this.description = description;
        this.amount = amount;
        this.unit = unit;
        this.location = location;
        this.bestBefore = bestBefore;
        this.category = category;
    }


    /**
     * Returns the ID of the ingredient.
     */
    public String getId() {

        return id;
    }

    /**
     * Returns the ingredient description.
     */
    public String getDescription() {

        return description;
    }

    /**
     * Returns the amount of the ingredient that this entity represents.
     */
    public double getAmount() {

        return amount;
    }

    /**
     * Returns the unit of the ingredient that this entity represents.
     */
    public String getUnit() {

        return unit;
    }

    /**
     * Returns the location where this ingredient is stored.
     */
    public String getLocation() {

        return location;
    }

    /**
     * Returns the best before date of the ingredient that this entity represents.
     */
    public Instant getBestBefore() {

        return bestBefore;
    }

    /**
     * Sets the description of the ingredient that this entity represents.
     * @param description The new description of the ingredient.
     */
    public void setDescription(String description) {

        this.description = description;
    }

    /**
     * Sets the amount of ingredient that this entity represents.
     * @param amount The new amount for this ingredient.
     */
    public void setAmount(double amount) {

        this.amount = amount;
    }

    /**
     * Sets the unit of ingredient that this entity represents.
     * @param unit The new unit of this ingredient.
     */
    public void setUnit(String unit) {

        this.unit = unit;
    }

    /**
     * Sets the location where this ingredient resides.
     * @param location The new location that this ingredient resides in.
     */
    public void setLocation(String location) {

        this.location = location;
    }

    /**
     * Sets the best before date of the ingredient that this entity represents.
     * @param bestBefore The new best before date of the ingredient.
     */
    public void setBestBefore(Instant bestBefore) {

        this.bestBefore = bestBefore;
    }

    /**
     * Returns the category of the ingredient that this entity represents.
     */
    public String getCategory() {

        return category;
    }

    /**
     * Sets the category of the ingredient that this entity represents.
     * @param category The new category of the ingredient.
     */
    public void setCategory(String category) {

        this.category = category;
    }

    /**
     * Creates hashmap of the ingredient object
     * @return map
     */
    public HashMap<String, Object> toHashMap() {

        HashMap<String, Object> map = new HashMap<>();
        map.put("id", id);
        map.put("description", description);
        map.put("amount", amount);
        map.put("unit", unit);
        map.put("location", location);
        map.put("bestBefore", bestBefore.toEpochMilli());
        map.put("category", category);
        return map;
    }


    /**
     *
     * @param doc query document snapshot
     * @return
     */
    public static Ingredient fromDocument(QueryDocumentSnapshot doc) {
        return new Ingredient(
                doc.getId(),
                doc.getString("description"),
                (double) doc.get("amount"),
                doc.getString("unit"),
                doc.getString("location"),
                Instant.ofEpochMilli(doc.getLong("bestBefore")),
                doc.getString("category")
        );
    }
}
