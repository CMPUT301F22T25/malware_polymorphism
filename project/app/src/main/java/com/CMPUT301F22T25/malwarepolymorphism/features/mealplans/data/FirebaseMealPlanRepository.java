package com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.data;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.data.MealPlanAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.data.MealPlanRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlan;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlanIngredientMember;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlanRecipeMember;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

/**
 * This class is responsible for handling all the data access for the meal plan feature.
 * It implements the MealPlanRepository interface and is used by the MealPlanViewModel.
 * It uses the Firebase Firestore database to store and retrieve data.
 */
public class FirebaseMealPlanRepository implements MealPlanRepository {
    final FirebaseFirestore database;
    final CollectionReference mealPlanCollectionReference;
    private final MutableLiveData<List<MealPlan>> liveMealPlanData;

    /**
     * Constructor for the FirebaseMealPlanRepository class.
     * It initializes the database and the collection reference.
     * It also sets up a listener for the database to update the liveMealPlanData when the database changes.
     */
    @Inject
    public FirebaseMealPlanRepository() {
        liveMealPlanData = new MutableLiveData<>(new ArrayList<>());
        database = FirebaseFirestore.getInstance();
        mealPlanCollectionReference = database.collection("MealPlanRepository");

        mealPlanCollectionReference.addSnapshotListener( (queryDocumentSnapshots, error) -> {
            if (queryDocumentSnapshots == null)
                return;

            List<MealPlan> mealPlans = liveMealPlanData.getValue();
            assert mealPlans != null;
            mealPlans.clear();
            for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                mealPlans.add(getMealPlanFromDoc(doc));
            }

            liveMealPlanData.postValue(mealPlans);
        });
    }

    /**
     * This method returns the liveMealPlanData.
     * @return liveMealPlanData
     */
    @Override
    public LiveData<List<MealPlan>> getMealPlanList() { return liveMealPlanData; }

    /**
     * This method adds a new meal plan to the database.
     * @param mealPlanBundle
     */
    @Override
    public void addMealPlan(MealPlanAttributeBundle mealPlanBundle) {
        DocumentReference mealPlanDoc = mealPlanCollectionReference.document();
        HashMap<String, Object> mealPlanData = getMapFromBundle(mealPlanBundle);
        mealPlanDoc.set(mealPlanData);
    }

    /**
     * This method modifies an existing meal plan in the database.
     * @param id
     * @param modified
     */
    @Override
    public void modifyMealPlan(String id, MealPlanAttributeBundle modified) {
        DocumentReference mealPlanDoc =  mealPlanCollectionReference.document(id);
        HashMap<String, Object> mealPlanData = getMapFromBundle(modified);
        mealPlanDoc.update(mealPlanData);
    }

    /**
     * This method returns a meal plan from the database.
     * @param id
     * @return
     */
    @Override
    public MealPlan getMealPlan(String id){
        return liveMealPlanData
                .getValue()
                .stream()
                .filter(mealPlan -> mealPlan.getId().equals(id))
                .findFirst()
                .orElse(null);
    }

    /**
     * This method converts a MealPlanAttributeBundle into a HashMap.
     * @param mealPlanBundle
     * @return HashMap<String, Object>
     */
    private HashMap<String, Object> getMapFromBundle(MealPlanAttributeBundle mealPlanBundle){
        HashMap<String, Object> mealPlanData = new HashMap<>();
        mealPlanData.put("title", mealPlanBundle.getTitle());
        mealPlanData.put("servings", mealPlanBundle.getNumberOfServings());
        mealPlanData.put("date", mealPlanBundle.getDate());
        mealPlanData.put("ingredients", mealPlanBundle.getIngredients());
        mealPlanData.put("recipes",mealPlanBundle.getRecipes());
        return mealPlanData;
    }

    /**
     * This method converts a QueryDocumentSnapshot into a MealPlan.
     * @param  doc
     * @return MealPlan
     */
    private MealPlan getMealPlanFromDoc(QueryDocumentSnapshot doc) {
        List<HashMap<String, Object>> ingredients_map = (List<HashMap<String, Object>>) doc.get("ingredients");
        List<HashMap<String,Object>> recipesMap = (List<HashMap<String,Object>>) doc.get("recipes");
        List<MealPlanIngredientMember> ingredients_list = new ArrayList<>();
        List<MealPlanRecipeMember> recipes_list =  new ArrayList<>();
        for (HashMap<String, Object> ingredient : ingredients_map){
            ingredients_list.add(new MealPlanIngredientMember(
                    (String) ingredient.get("description"),
                    (long) ingredient.get("amount"),
                    (String) ingredient.get("unit"),
                    (String) ingredient.get("Category")
            ));
        }

        for (HashMap<String, Object> recipe : recipesMap){
            recipes_list.add((new MealPlanRecipeMember(
                    (String) recipe.get("title"),
                    (long) recipe.get("prepare_time"),
                    (long) recipe.get("servings"),
                (String) recipe.get("category")
            )));
        }

        return new MealPlan(
                doc.getId(),
                doc.getString("title"),
                doc.getLong("servings"),
                doc.getDate("date"),
                ingredients_list,
                recipes_list
        );
    }



}
