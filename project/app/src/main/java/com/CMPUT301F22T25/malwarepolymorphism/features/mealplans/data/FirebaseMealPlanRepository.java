package com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.data;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.data.MealPlanAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.data.MealPlanRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlan;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlanRecipeMember;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

/**
 * This class is responsible for handling all the data access for the meal plan feature.
 * It implements the MealPlanRepository interface and is used by the MealPlanViewModel.
 * It uses the Firebase Firestore database to store and retrieve data.
 */
public class FirebaseMealPlanRepository implements MealPlanRepository {
    final FirebaseFirestore database;
    final CollectionReference mealPlanCollectionReference;
    private final MutableLiveData<List<MealPlan>> liveMealPlanData;

    /**
     * Constructor for the FirebaseMealPlanRepository class.
     * It initializes the database and the collection reference.
     * It also sets up a listener for the database to update the liveMealPlanData when the database changes.
     */
    @Inject
    public FirebaseMealPlanRepository() {
        liveMealPlanData = new MutableLiveData<>(new ArrayList<>());
        database = FirebaseFirestore.getInstance();
        mealPlanCollectionReference = database.collection("MealPlanRepository");

        mealPlanCollectionReference.addSnapshotListener( (queryDocumentSnapshots, error) -> {
            if (queryDocumentSnapshots == null)
                return;

            List<MealPlan> mealPlans = liveMealPlanData.getValue();
            assert mealPlans != null;
            mealPlans.clear();
            for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                mealPlans.add(getMealPlanFromDoc(doc));
            }

            liveMealPlanData.postValue(mealPlans);
        });
    }

    /**
     * This method returns the liveMealPlanData.
     * @return liveMealPlanData
     */
    @Override
    public LiveData<List<MealPlan>> getMealPlanList() { return liveMealPlanData; }

    /**
     * This method adds a new meal plan to the database.
     * @param mealPlanBundle
     */
    @Override
    public void addMealPlan(MealPlanAttributeBundle mealPlanBundle) {
        DocumentReference mealPlanDoc = mealPlanCollectionReference.document();
        HashMap<String, Object> mealPlanData = mealPlanBundle.toHashMap();
        ArrayList<RecipeIngredientMember> requiredIngredients = new ArrayList<>(
                mealPlanBundle.getIngredients());

        for (MealPlanRecipeMember recipe : mealPlanBundle.getRecipes()) {
            requiredIngredients.addAll(
                    recipe.getScaledIngredients(mealPlanBundle.getNumberOfServings()));
        }

        List<HashMap<String, Object>> requiredIngredientsList = new ArrayList<>();
        requiredIngredients.forEach(member -> requiredIngredientsList.add(member.toHashMap()));

        mealPlanData.put("requiredIngredients", requiredIngredientsList);
        mealPlanDoc.set(mealPlanData);
    }
    /**
     * This method returns a meal plan from the database.
     * @param id
     * @return
     */
    @Override
    public MealPlan getMealPlan(String id){
        return liveMealPlanData
                .getValue()
                .stream()
                .filter(mealPlan -> mealPlan.getId().equals(id))
                .findFirst()
                .orElse(null);
    }

    /**
     * This method converts a QueryDocumentSnapshot into a MealPlan.
     * @param  doc
     * @return MealPlan
     */
    private MealPlan getMealPlanFromDoc(QueryDocumentSnapshot doc) {
        List<HashMap<String, Object>> ingredientsList = (List<HashMap<String, Object>>) doc.get("ingredients");
        List<RecipeIngredientMember> ingredients = new ArrayList<>();

        assert ingredientsList != null;
        ingredientsList.forEach(map -> ingredients.add(RecipeIngredientMember.fromHashMap(map)));

        List<HashMap<String,Object>> recipesList = (List<HashMap<String,Object>>) doc.get("recipes");
        List<MealPlanRecipeMember> recipes =  new ArrayList<>();

        assert recipesList != null;
        recipesList.forEach(map -> recipes.add(MealPlanRecipeMember.fromHashMap(map)));
        return new MealPlan(
                doc.getId(),
                doc.getString("title"),
                doc.getLong("servings"),
                Instant.ofEpochMilli(doc.getLong("date")),
                ingredients,
                recipes
        );
    }
}
