package com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.UI;

import android.os.Bundle;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;

import com.CMPUT301F22T25.malwarepolymorphism.R;
import com.CMPUT301F22T25.malwarepolymorphism.databinding.FragmentIngredientsAddBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.IngredientLocation;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.usecases.AddIngredientUseCase;

import java.time.Instant;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;

import javax.inject.Inject;

import dagger.hilt.android.AndroidEntryPoint;

@AndroidEntryPoint
public class AddIngredientActivity extends AppCompatActivity {

    @Inject
    AddIngredientUseCase addIngredientUseCase;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        String description;
        AtomicReference<IngredientLocation> currentlySelectedLocation = new AtomicReference<>(IngredientLocation.PANTRY);

        FragmentIngredientsAddBinding binding = FragmentIngredientsAddBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        binding.cancelButton.setOnClickListener(view -> {finish();});

        binding.locationToggleButton.check(R.id.pantry_button);
        binding.locationToggleButton.addOnButtonCheckedListener((group, checkedId, isChecked) -> {
            // We don't care about buttons not being checked.
            if (!isChecked) {
                return;
            }
            switch (checkedId) {
                case R.id.pantry_button:
                    currentlySelectedLocation.set(IngredientLocation.PANTRY);
                    break;
                case R.id.freezer_button:
                    currentlySelectedLocation.set(IngredientLocation.FREEZER);
                    break;
                case R.id.fridge_button:
                    currentlySelectedLocation.set(IngredientLocation.FRIDGE);
                    break;
            }
        });

        binding.saveButton.setOnClickListener(view -> {
            IngredientViewModel model = new ViewModelProvider(this).get(IngredientViewModel.class);
            IngredientAttributeBundle bundle = new IngredientAttributeBundle(
                    "TITLE",
                Objects.requireNonNull(binding.descriptionTextField.getEditText()).getText().toString(),
                    Integer.parseInt(Objects.requireNonNull(binding.amountTextField.getEditText()).getText().toString()),
                    Objects.requireNonNull(binding.unitTextField.getEditText()).getText().toString(),
                    currentlySelectedLocation.get(),
                    Instant.now(),
                    Objects.requireNonNull(binding.categoryTextField.getEditText()).getText().toString()
            );
            addIngredientUseCase.execute(bundle);
            finish();
        });
    }
}
