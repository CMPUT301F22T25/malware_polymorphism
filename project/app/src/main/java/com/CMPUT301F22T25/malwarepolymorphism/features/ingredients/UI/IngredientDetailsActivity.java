package com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.UI;

import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.os.Bundle;
import android.util.Log;

import com.CMPUT301F22T25.malwarepolymorphism.databinding.ActivityIngredientDetailsBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.Ingredient;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.usecases.AddIngredientUseCase;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.usecases.GetIngredientUseCase;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.usecases.ModifyIngredientUseCase;
import com.google.android.material.datepicker.MaterialDatePicker;

import java.time.Instant;
import java.util.Objects;

import javax.inject.Inject;

import dagger.hilt.android.AndroidEntryPoint;


@AndroidEntryPoint
public class IngredientDetailsActivity extends AppCompatActivity {


    @Inject
    ModifyIngredientUseCase modifyIngredientUseCase;

    @Inject
    GetIngredientUseCase getIngredientUseCase;

    @Inject
    AddIngredientUseCase addIngredientUseCase;

    ActivityIngredientDetailsBinding binding;


    @SuppressLint("SetTextI18n")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityIngredientDetailsBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        // TODO: Set up the validation on the UI text boxes.

        binding.bestBeforeDate.setFocusable(false);
        binding.bestBeforeDate.setFocusableInTouchMode(false);
        binding.bestBeforeDateEditTexts.setFocusable(false);
        binding.bestBeforeDateEditTexts.setFocusableInTouchMode(false);
        binding.bestBeforeDateEditTexts.setOnClickListener(view -> {
            MaterialDatePicker.Builder<Long> builder = MaterialDatePicker.Builder.datePicker();
            builder.setInputMode(MaterialDatePicker.INPUT_MODE_TEXT);
            MaterialDatePicker<Long> picker = builder.build();
            picker.show(getSupportFragmentManager(), "date");
            Log.d("BBDate", "Clicked on the text field");
        });

        boolean isEditing = getIntent().getBooleanExtra("isEditing", false);

        if (isEditing) {
            binding.titleTextField.setText("Edit Ingredient");
            String ingredientId = getIntent().getStringExtra("ingredientId");
            prePopulateFields(ingredientId);
        }

        binding.cancelButton.setOnClickListener(view -> {
            finish();
        });

        binding.saveButton.setOnClickListener(view -> {

            String description = Objects.requireNonNull(binding.descriptionTextField.getEditText())
                    .getText().toString();
            Instant bestBefore = Instant.now();
            String location = Objects.requireNonNull(binding.locationSetTextField.getEditText())
                    .getText().toString();
            long amount = Long.parseLong(Objects.requireNonNull(binding.amountTextField.getEditText())
                    .getText().toString());
            String unit = Objects.requireNonNull(binding.unitTextField.getEditText())
                    .getText().toString();
            String category = Objects.requireNonNull(binding.categoryTextField.getEditText())
                    .getText().toString();


            if (/* validate data here*/ false) {
                return;
            }

            IngredientAttributeBundle bundle = new IngredientAttributeBundle(
                    description,
                    amount,
                    unit,
                    location,
                    bestBefore,
                    category
            );

            if (isEditing) {
                String ingredientId = getIntent().getStringExtra("ingredientId");
                modifyIngredientUseCase.execute(ingredientId, bundle);
            } else {
                addIngredientUseCase.execute(bundle);
            }
            finish();
        });
    }

    void prePopulateFields(String ingredientId) {
        Ingredient ingredient = getIngredientUseCase.execute(ingredientId);
        assert ingredient != null;
        Objects.requireNonNull(binding.descriptionTextField.getEditText())
                .setText(ingredient.getDescription());
        Objects.requireNonNull(binding.amountTextField.getEditText())
                .setText(String.valueOf(ingredient.getAmount()));
        Objects.requireNonNull(binding.locationSetTextField.getEditText())
                .setText(ingredient.getLocation());
        binding.amountTextField.getEditText().
                setText(String.valueOf(ingredient.getAmount()));
        Objects.requireNonNull(binding.unitTextField.getEditText())
                .setText(ingredient.getCategory());
    }
}