package com.CMPUT301F22T25.malwarepolymorphism.features.recipes.data;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.Recipe;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class FirebaseRecipeRepository implements RecipeRepository {
    final FirebaseFirestore database;
    final CollectionReference recipeCollectionReference;
    private MutableLiveData<List<Recipe>> liveRecipeData;

    public FirebaseRecipeRepository() {
        liveRecipeData = new MutableLiveData<>(new ArrayList<>());
        database = FirebaseFirestore.getInstance();
        recipeCollectionReference = database.collection("RecipeRepository");

        recipeCollectionReference.addSnapshotListener((queryDocumentSnapshots, error) -> {
            if (queryDocumentSnapshots == null) {
                return;
            }

            List<Recipe> recipes = liveRecipeData.getValue();
            assert recipes != null;
            recipes.clear();
            for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                recipes.add(getRecipeFromDoc(doc));
            }

            liveRecipeData.postValue(recipes);
        });
    }

    @Override
    public LiveData<List<Recipe>> getRecipeList() {
        return liveRecipeData;
    }

    @Override
    public void addRecipe(RecipeAttributeBundle recipeBundle) {
        DocumentReference recipeDoc = recipeCollectionReference.document();
        HashMap<String, Object> recipeData = getMapFromBundle(recipeBundle);
        recipeDoc.set(recipeData);
    }

    @Override
    public void modifyRecipe(String id, RecipeAttributeBundle modified) {
        DocumentReference recipeDoc = recipeCollectionReference.document(id);
        HashMap<String, Object> recipeData = getMapFromBundle(modified);
        recipeDoc.update(recipeData);
    }

    @Override
    public void deleteRecipe(String id) {
        recipeCollectionReference
                .document(id)
                .delete();
    }

    @Override
    public Recipe getRecipe(String id) {
        return liveRecipeData
                .getValue()
                .stream()
                .filter(recipe -> recipe.getId().equals(id))
                .findFirst()
                .orElse(null);
    }

    private Recipe getRecipeFromDoc(QueryDocumentSnapshot doc) {
        List<HashMap<String, Object>> ingredients_map = (List<HashMap<String, Object>>) doc.get("ingredients");
        List<RecipeIngredientMember> ingredients_list = new ArrayList<>();
        for (HashMap<String, Object> ingredient : ingredients_map) {
            ingredients_list.add(new RecipeIngredientMember(
                    (String) ingredient.get("description"),
                    (long) ingredient.get("amount"),
                    (String) ingredient.get("unit"),
                    (String) ingredient.get("category")
            ));
        }
        return new Recipe(
                doc.getId(),
                doc.getString("title"),
                doc.getLong("preparation_time"),
                doc.getLong("num_servings"),
                doc.getString("category"),
                doc.getString("comments"),
                doc.getString("image_url"),
                ingredients_list
                );
    }

    private HashMap<String, Object> getMapFromBundle(RecipeAttributeBundle bundle) {
        HashMap<String, Object> recipeData = new HashMap<>();
        recipeData.put("title", bundle.getTitle());
        recipeData.put("preparation_time", bundle.getPreparationTime());
        recipeData.put("num_servings", bundle.getNumberOfServings());
        recipeData.put("category", bundle.getCategory());
        recipeData.put("comments", bundle.getComment());
        recipeData.put("image_url", bundle.getImageUrl());
        recipeData.put("ingredients", bundle.getIngredients());
        return recipeData;
    }

    private Recipe getRecipeFromBundle(String id, RecipeAttributeBundle recipeBundle) {
        return new Recipe(
                id,
                recipeBundle.getTitle(),
                recipeBundle.getPreparationTime(),
                recipeBundle.getNumberOfServings(),
                recipeBundle.getCategory(),
                recipeBundle.getComment(),
                recipeBundle.getImageUrl(),
                recipeBundle.getIngredients()
        );
    }
}
