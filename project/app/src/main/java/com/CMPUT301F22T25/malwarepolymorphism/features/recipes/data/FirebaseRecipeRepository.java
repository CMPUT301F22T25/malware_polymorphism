package com.CMPUT301F22T25.malwarepolymorphism.features.recipes.data;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.Recipe;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;

import javax.inject.Inject;

public class FirebaseRecipeRepository implements RecipeRepository {
    final FirebaseFirestore database;
    final CollectionReference recipeCollectionReference;
    private final MutableLiveData<List<Recipe>> liveRecipeData;

    @Inject
    public FirebaseRecipeRepository() {
        liveRecipeData = new MutableLiveData<>(new ArrayList<>());
        database = FirebaseFirestore.getInstance();
        recipeCollectionReference = database.collection("RecipeRepository");

        recipeCollectionReference.addSnapshotListener((queryDocumentSnapshots, error) -> {
            if (queryDocumentSnapshots == null)
                return;

            List<Recipe> recipes = liveRecipeData.getValue();
            assert recipes != null;
            recipes.clear();
            for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                recipes.add(getRecipeFromDoc(doc));
            }

            liveRecipeData.postValue(recipes);
        });
    }

    @Override
    public LiveData<List<Recipe>> getRecipeList() {
        return liveRecipeData;
    }

    @Override
    public void addRecipe(RecipeAttributeBundle recipeBundle) {
        DocumentReference recipeDoc = recipeCollectionReference.document();
        recipeDoc.set(recipeBundle.toHashMap());
    }

    @Override
    public void modifyRecipe(String id, RecipeAttributeBundle modified) {
        DocumentReference recipeDoc = recipeCollectionReference.document(id);
        recipeDoc.update(modified.toHashMap());
    }

    @Override
    public void deleteRecipe(String id) {
        recipeCollectionReference
                .document(id)
                .delete();
    }

    @Override
    public void sortRecipesByField(String sortByField) {
        recipeCollectionReference.orderBy(sortByField).addSnapshotListener((value, error) -> {
            if (value == null)
                return;

            List<Recipe> recipes = liveRecipeData.getValue();
            assert recipes != null;
            recipes.clear();
            for (QueryDocumentSnapshot doc : value)
                recipes.add(getRecipeFromDoc(doc));

            liveRecipeData.postValue(recipes);
        });
    }

    @Override
    public Recipe getRecipe(String id) {
        return Objects.requireNonNull(liveRecipeData
                        .getValue())
                .stream()
                .filter(recipe -> recipe.getId().equals(id))
                .findFirst()
                .orElse(null);
    }

    private Recipe getRecipeFromDoc(QueryDocumentSnapshot doc) {
        List<HashMap<String, Object>> ingredientsList = (List<HashMap<String, Object>>) doc.get("ingredients");
        List<RecipeIngredientMember> ingredients = new ArrayList<>();
        assert ingredientsList != null;
        ingredientsList.forEach(map -> ingredients.add(RecipeIngredientMember.fromHashMap(map)));

        return new Recipe(
                doc.getId(),
                doc.getString("title"),
                doc.getLong("preparationTime"),
                doc.getLong("numOfServings"),
                doc.getString("category"),
                doc.getString("comments"),
                doc.getString("imageUrl"),
                ingredients
        );
    }
}
