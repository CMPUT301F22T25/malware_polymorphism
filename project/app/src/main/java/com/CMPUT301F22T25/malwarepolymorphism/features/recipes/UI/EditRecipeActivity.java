package com.CMPUT301F22T25.malwarepolymorphism.features.recipes.UI;

import static androidx.activity.result.contract.ActivityResultContracts.PickVisualMedia.*;

import android.annotation.SuppressLint;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.PickVisualMediaRequest;
import androidx.activity.result.contract.ActivityResultContract;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.activity.result.contract.ActivityResultContracts.PickVisualMedia;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.FileProvider;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.CMPUT301F22T25.malwarepolymorphism.databinding.ActivityRecipeEditBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.common.RecyclerViewOnItemClickHandler;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeRepository;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.Recipe;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;
import com.bumptech.glide.Glide;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import javax.inject.Inject;

import dagger.hilt.android.AndroidEntryPoint;

@AndroidEntryPoint
public class EditRecipeActivity extends AppCompatActivity implements RecyclerViewOnItemClickHandler {
    @Inject
    RecipeRepository recipeRepository;

    private ActivityRecipeEditBinding binding;

    private EditRecipeMemberIngredientAdapter adapter;

    private List<RecipeIngredientMember> recipeIngredients;

    private EditRecipeViewModel model;

    private String imgUrl;

    @SuppressLint("NotifyDataSetChanged")
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityRecipeEditBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        ActivityResultContract<Integer, RecipeIngredientMember> contract = new
                AddIngredientToRecipeActivity.AddIngredientContract();

        ActivityResultLauncher<PickVisualMediaRequest> getImageActivity = registerForActivityResult(
                new PickVisualMedia(), uri -> {
                    if (uri == null)
                        return;

                    StorageReference ref = FirebaseStorage.getInstance().getReference();
                    StorageReference imgRef = ref.child("images/"+UUID.randomUUID().toString());
                    UploadTask task = imgRef.putFile(uri);

                    binding.saveButton.setEnabled(false);

                    task.addOnSuccessListener(taskSnapshot -> {
                        imgRef.getDownloadUrl().addOnSuccessListener(url -> {
                            imgUrl = url.toString();
                            Glide.with(getApplicationContext())
                                    .load(imgUrl)
                                    .fitCenter()
                                    .into(binding.imageView);
                            binding.saveButton.setEnabled(true);
                        });
                    });
                });

        ActivityResultLauncher<Integer> selectIngredient =
                registerForActivityResult(contract, data -> {
                    if (data == null)
                        return;
                    model.addIngredientToSelected(data);
            });


        model = new ViewModelProvider(this).get(EditRecipeViewModel.class);
        recipeIngredients = new ArrayList<>();

        adapter = new EditRecipeMemberIngredientAdapter(recipeIngredients, this);
        binding.ingredientsRecyclerView.setAdapter(adapter);
        binding.ingredientsRecyclerView.setLayoutManager(new LinearLayoutManager(this,
                LinearLayoutManager.VERTICAL, false));

        binding.imageView.setOnClickListener(view -> {
            getImageActivity.launch(new PickVisualMediaRequest.Builder()
                    .build());
        });

        model.getCurrentlySelectedIngredients().observe(this, recipeIngredientMembers -> {
            adapter.setIngredients(recipeIngredientMembers);
            adapter.notifyDataSetChanged();
            recipeIngredients = recipeIngredientMembers;
        });

        boolean isEditing = getIntent().getBooleanExtra("isEditing", false);

        if (isEditing)
            prePopulateFields();

        binding.cancelButton.setOnClickListener(view -> finish());

        binding.addIngredientsButton.setOnClickListener(view -> {
            EditRecipeIngredientDialog dialog = new EditRecipeIngredientDialog(model);
            Bundle args = new Bundle();
            dialog.setArguments(args);
            dialog.show(getFragmentManager(), "ADD");
        });

        binding.selectIngredientsButton.setOnClickListener(view -> {
            selectIngredient.launch(1);
        });

        // TODO: Add validation here.
        binding.saveButton.setOnClickListener(view -> {
            String title = Objects.requireNonNull(binding.titleTextField.getEditText())
                    .getText().toString();
            String preparationTimeInput = Objects.requireNonNull(
                    binding.preparationTimeTextField.getEditText()).getText().toString();

            String numberOfServingsInput = Objects.requireNonNull(binding.numberOfServingsTextField
                    .getEditText()).getText().toString();

            String categoryInput = Objects.requireNonNull(
                    binding.categoryTextField.getEditText()).getText().toString();

            String commentInput = Objects.requireNonNull(
                    binding.commentsTextField.getEditText()).getText().toString();

            // validate input
            boolean validInput = true;
            if (title.isEmpty()) {
                binding.titleTextField.setError("Title cannot be empty");
                validInput = false;
            }
            if (preparationTimeInput.isEmpty()) {
                binding.preparationTimeTextField.setError("Preparation time cannot be empty");
                validInput = false;
            }
            if (numberOfServingsInput.isEmpty()) {
                binding.numberOfServingsTextField.setError("Number of servings cannot be empty");
                validInput = false;
            }
            if (categoryInput.isEmpty()) {
                binding.categoryTextField.setError("Category cannot be empty");
                validInput = false;
            }
            if (commentInput.isEmpty()) {
                binding.commentsTextField.setError("Comment cannot be empty");
                validInput = false;
            }

            if (!validInput) {
                return;
            }

            String defaultImageUrl = "https://x.yummlystatic.com/web/Recipe-default-07.jpg";
            String imageUrl = (imgUrl != null)? imgUrl : defaultImageUrl;

            RecipeAttributeBundle bundle = new RecipeAttributeBundle(
                title,
                    Long.parseLong(preparationTimeInput),
                    Long.parseLong(numberOfServingsInput),
                    categoryInput,
                    commentInput,
                    imageUrl,
                    recipeIngredients
            );
            if (isEditing)
                recipeRepository.modifyRecipe(getIntent().getStringExtra("recipeId"), bundle);
            else
                recipeRepository.addRecipe(bundle);
            finish();
        });

    }

    @SuppressLint({"SetTextI18n", "NotifyDataSetChanged"})
    void prePopulateFields() {
        String recipeId = getIntent().getStringExtra("recipeId");

        Recipe recipe = recipeRepository.getRecipe(recipeId);

        Glide.with(binding.getRoot())
                .load(recipe.getImageUrl())
                .fitCenter()
                .into(binding.imageView);

        // Set the title to reflect that we are editing a recipe.
        binding.deleteRecipeIconButton.setVisibility(View.VISIBLE);

        binding.deleteRecipeIconButton.setOnClickListener(view -> {
            recipeRepository.deleteRecipe(recipeId);
            finish();
        });

        Objects.requireNonNull(binding.titleTextField.getEditText())
                .setText(recipe.getTitle());

        Objects.requireNonNull(binding.preparationTimeTextField.getEditText())
                .setText(String.valueOf(recipe.getPreparationTimeInMinutes()));

        Objects.requireNonNull(binding.numberOfServingsTextField.getEditText())
                .setText(String.valueOf(recipe.getNumberOfServings()));

        Objects.requireNonNull(binding.categoryTextField.getEditText())
                .setText(recipe.getCategory());

        Objects.requireNonNull(binding.commentsTextField.getEditText())
                .setText(recipe.getComments());

        imgUrl = recipe.getImageUrl();
        model.setCurrentlySelectedIngredients(recipe.getIngredients());
    }

    @Override
    public void onRecyclerViewItemClicked(int position) {
        model.setSelectedMember(recipeIngredients.get(position));
        EditRecipeIngredientDialog dialog = new EditRecipeIngredientDialog(model);
        Bundle args = new Bundle();
        args.putBoolean("isEditing", true);
        dialog.setArguments(args);
        dialog.show(getFragmentManager(), "TAG");
        Log.w("EditRecipeActivity", "Clicked on the ingredient " + recipeIngredients.get(position).getDescription());
    }
}
