package com.CMPUT301F22T25.malwarepolymorphism.features.recipes.UI;

import android.annotation.SuppressLint;
import android.app.DialogFragment;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.Nullable;

import com.CMPUT301F22T25.malwarepolymorphism.databinding.FragmentAddIngredientDialogBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.common.SingleArgLambda;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;

import java.util.Objects;

@SuppressLint("ValidFragment")
public class EditRecipeIngredientDialog extends DialogFragment {
    FragmentAddIngredientDialogBinding binding;
    private final RecipeIngredientMember edited;
    private final SingleArgLambda<RecipeIngredientMember> onSave;
    private final SingleArgLambda<RecipeIngredientMember> onDelete;

    public EditRecipeIngredientDialog(SingleArgLambda<RecipeIngredientMember> onSave,
                                      SingleArgLambda<RecipeIngredientMember> onDelete,
                                      RecipeIngredientMember edited) {
        this.onSave = onSave;
        this.onDelete = onDelete;
        this.edited = edited;
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);
        binding = FragmentAddIngredientDialogBinding.inflate(inflater, container, false);

        binding.cancelButton.setOnClickListener(view -> dismiss());

        if (edited != null) {
            prePopulateFields();
        }

        binding.saveButton.setOnClickListener(view -> {
            RecipeIngredientMember newMember = getIngredientFromFields();
            if (newMember == null) { return; }
            onSave.call(newMember);
            dismiss();
        });
        return binding.getRoot();
    }

    void prePopulateFields() {
        binding.titleTextField.setText("Edit Ingredient");
        binding.saveButton.setText("Save");
        binding.deleteIconButton.setVisibility(View.VISIBLE);

        binding.deleteIconButton.setOnClickListener(view -> {
            onDelete.call(edited);
            dismiss();
        });

        Objects.requireNonNull(binding.descriptionTextField.getEditText())
                .setText(edited.getDescription());
        Objects.requireNonNull(binding.amountTextField.getEditText())
                .setText(String.valueOf(edited.getAmount()));
        Objects.requireNonNull(binding.unitTextField.getEditText())
                .setText(edited.getUnit());
        Objects.requireNonNull(binding.categoryTextField.getEditText())
                .setText(edited.getCategory());
    }

    RecipeIngredientMember getIngredientFromFields() {
        String descriptionInput = Objects.requireNonNull(binding.descriptionTextField.getEditText())
                .getText().toString();
        String amountTextField  = Objects.requireNonNull(binding.amountTextField.getEditText())
                .getText().toString();
        String categoryInput = Objects.requireNonNull(binding.categoryTextField.getEditText())
                .getText().toString();
        String unitInput = Objects.requireNonNull(binding.unitTextField.getEditText())
                .getText().toString();

        // validate input
        boolean isValid = true;
        if (descriptionInput.isEmpty()) {
            binding.descriptionTextField.setError("Description cannot be empty");
            isValid = false;
        }
        if (amountTextField.isEmpty()) {
            binding.amountTextField.setError("Amount cannot be empty");
            isValid = false;
        }
        if (categoryInput.isEmpty()) {
            binding.categoryTextField.setError("Category cannot be empty");
            isValid = false;
        }
        if (unitInput.isEmpty()) {
            binding.unitTextField.setError("Unit cannot be empty");
            isValid = false;
        }
        if (!isValid) {
            return null;
        }

        return new RecipeIngredientMember(
                descriptionInput,
                Long.parseLong(amountTextField),
                unitInput,
                categoryInput);
    }
}
