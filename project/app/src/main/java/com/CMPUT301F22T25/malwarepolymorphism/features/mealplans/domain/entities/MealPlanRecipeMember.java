package com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities;

import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.Recipe;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class MealPlanRecipeMember implements Serializable {
    private final String recipeId;
    private String title;
    private long preparationTimeInMinutes;
    private long numberOfServings;
    private String imageUrl;
    private List<RecipeIngredientMember> ingredients;

    /**
     * initializing the MealPlanRecipeMember object
     * @param recipeId
     * @param title
     * @param preparationTimeInMinutes
     * @param numberOfServings
     * @param imageUrl
     * @param ingredients
     */
    public MealPlanRecipeMember(String recipeId, String title,
                                long preparationTimeInMinutes,
                                long numberOfServings,
                                String imageUrl,
                                List<RecipeIngredientMember> ingredients) {
        this.recipeId = recipeId;
        this.title = title;
        this.preparationTimeInMinutes = preparationTimeInMinutes;
        this.numberOfServings = numberOfServings;
        this.imageUrl = imageUrl;
        this.ingredients = ingredients;
    }

    public static MealPlanRecipeMember fromRecipe(Recipe recipe) {
        return new MealPlanRecipeMember(
                recipe.getId(),
                recipe.getTitle(),
                recipe.getPreparationTimeInMinutes(),
                recipe.getNumberOfServings(),
                recipe.getImageUrl(),
                new ArrayList<>(recipe.getIngredients())
        );
    }


    public String getTitle() {

        return title;
    }

    public void setTitle(String title) {

        this.title = title;
    }

    public long getPreparationTimeInMinutes() {

        return preparationTimeInMinutes;
    }

    public void setPreparationTimeInMinutes(long preparationTimeInMinutes) {
        this.preparationTimeInMinutes = preparationTimeInMinutes;
    }

    public String getImageUrl() {

        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {

        this.imageUrl = imageUrl;
    }

    public long getNumberOfServings() {

        return numberOfServings;
    }

    public void setNumberOfServings(long numberOfServings) {
        this.numberOfServings = numberOfServings;
    }

    public String getRecipeId() {

        return recipeId;
    }

    public List<RecipeIngredientMember> getIngredients() {

        return ingredients;
    }

    public List<RecipeIngredientMember> getScaledIngredients(long servingsRequired) {
        ArrayList<RecipeIngredientMember> scaledList = new ArrayList<>();
        for (RecipeIngredientMember ingredient : ingredients) {
            RecipeIngredientMember scaled = RecipeIngredientMember.copy(ingredient);
            scaled.setAmount(ingredient.getAmount()*(servingsRequired) / numberOfServings);
            scaledList.add(scaled);
        }
        return scaledList;
    }

    public void setIngredients(List<RecipeIngredientMember> ingredients) {
        this.ingredients = ingredients;
    }

    public HashMap<String, Object> toHashMap() {
        HashMap<String, Object> map = new HashMap<>();
        map.put("recipeId", recipeId);
        map.put("title", title);
        map.put("preparationTime", preparationTimeInMinutes);
        map.put("numOfServings", numberOfServings);
        map.put("imageUrl", imageUrl);

        List<HashMap<String, Object>> ingredientList = new ArrayList<>();
        ingredients.forEach(member -> ingredientList.add(member.toHashMap()));
        map.put("ingredients", ingredientList);
        return map;
    }

    public static MealPlanRecipeMember fromHashMap(HashMap<String, Object> map) {
        List<RecipeIngredientMember> ingredientMembers = new ArrayList<>();
        List<HashMap<String, Object>> ingredients =
                (List<HashMap<String, Object>>) map.get("ingredients");

        assert ingredients != null;
        ingredients.forEach(
                ingredientMap -> ingredientMembers.add(
                        RecipeIngredientMember.fromHashMap(ingredientMap)));


        return new MealPlanRecipeMember(
                (String) map.get("recipeId"),
                (String) map.get("title"),
                (long) map.get("preparationTime"),
                (long) map.get("numOfServings"),
                (String) map.get("imageUrl"),
                ingredientMembers
        );
    }
}