package com.CMPUT301F22T25.malwarepolymorphism.features.shoppinglist.data;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;
import com.CMPUT301F22T25.malwarepolymorphism.features.shoppinglist.domain.data.ShoppingListRepository;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.ListenerRegistration;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

public class FirebaseShoppingListRepository implements ShoppingListRepository {
    final FirebaseFirestore database;
    final CollectionReference availableIngredientsCollection;
    private final MutableLiveData<List<FirebaseShoppingListEntry>> shoppingList;

    private ListenerRegistration registration;

    @Inject
    public FirebaseShoppingListRepository() {
        shoppingList = new MutableLiveData<>(new ArrayList<>());
        database = FirebaseFirestore.getInstance();
        availableIngredientsCollection = database.collection("AvailableIngredients");

        registration = availableIngredientsCollection.whereLessThan("amount", 0).addSnapshotListener((queryDocumentSnapshots, error) -> {
            if (queryDocumentSnapshots == null)
                return;

            List<FirebaseShoppingListEntry> requiredIngredients = shoppingList.getValue();
            assert requiredIngredients != null;
            requiredIngredients.clear();
            for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                requiredIngredients.add(getShoppingListEntryFromDoc(doc));
            }

            shoppingList.postValue(requiredIngredients);
        });
    }


    private FirebaseShoppingListEntry getShoppingListEntryFromDoc(QueryDocumentSnapshot doc) {
        RecipeIngredientMember recipe = new RecipeIngredientMember(
                doc.getString("description"),
                Math.abs(doc.getLong("amount")),
                doc.getString("unit"),
                doc.getString("category")
        );
        return new FirebaseShoppingListEntry(recipe, Boolean.FALSE.equals(
                doc.getBoolean("isChecked")));
    }

    @Override
    public LiveData<List<FirebaseShoppingListEntry>> getShoppingList() {
        return shoppingList;
    }

    @Override
    public void addIngredient(RecipeIngredientMember ingredient) {
        // if doc with id exists, update it
        // else, create new doc
        DocumentReference docRef = availableIngredientsCollection.document(ingredient.getDescription() + ":" + ingredient.getUnit());
        docRef.get().addOnSuccessListener(documentSnapshot -> {
            if (documentSnapshot.exists()) {
                docRef.update("amount", documentSnapshot.getLong("amount") + ingredient.getAmount());
                docRef.update("isChecked", false);
            } else {
                HashMap<String, Object> map = ingredient.toHashMap();
                map.put("isChecked", false);
                docRef.set(map);
            }
        });
    }

    @Override
    public void addRequiredIngredient(RecipeIngredientMember ingredient) {
        DocumentReference docRef = availableIngredientsCollection.document(getIdFromIngredient(ingredient));
        docRef.get().addOnSuccessListener(documentSnapshot -> {
            if (documentSnapshot.exists()) {
                docRef.update("amount", documentSnapshot.getLong("amount") - ingredient.getAmount());
                docRef.update("isChecked", false);
            } else {
                HashMap<String, Object> data = ingredient.toHashMap();
                data.put("amount", -ingredient.getAmount());
                docRef.set(data);
            }
        });
    }

    @Override
    public void addRequiredIngredients(List<RecipeIngredientMember> ingredients) {
        for (RecipeIngredientMember ingredient : ingredients) {
            addRequiredIngredient(ingredient);
        }
    }

    @Override
    public void removeIngredient(RecipeIngredientMember ingredient) {
        addRequiredIngredient(ingredient);
    }

    @Override
    public void removeRequiredIngredient(RecipeIngredientMember ingredients) {
        addIngredient(ingredients);
    }

    @Override
    public void removeRequiredIngredients(List<RecipeIngredientMember> ingredients) {
        for (RecipeIngredientMember ingredient : ingredients) {
            removeRequiredIngredient(ingredient);
        }
    }

    @Override
    public void modifyIngredient(RecipeIngredientMember oldIngredient, RecipeIngredientMember newIngredient) {
        String oldId = getIdFromIngredient(oldIngredient);
        String newId = getIdFromIngredient(newIngredient);
        if (oldId.equals(newId)) {
            DocumentReference docRef = availableIngredientsCollection.document(oldId);
            docRef.get().addOnSuccessListener(documentSnapshot -> {
                if (documentSnapshot.exists()) {
                    docRef.update("amount", documentSnapshot.getLong("amount") + (newIngredient.getAmount() - oldIngredient.getAmount()));
                    docRef.update("isChecked", false);
                }
            });
        } else {
            removeIngredient(oldIngredient);
            HashMap<String, Object> map = newIngredient.toHashMap();
            map.put("isChecked", false);
            availableIngredientsCollection.document(newId).set(map);
        }
    }

    @Override
    public void sortShoppingListByField(String field) {
        registration.remove();
        registration = availableIngredientsCollection
                .whereLessThan("amount", 0)
                .orderBy("amount")
                .orderBy(field)
                .addSnapshotListener((queryDocumentSnapshots, error) -> {
                    if (queryDocumentSnapshots == null)
                        return;

                    List<FirebaseShoppingListEntry> requiredIngredients = shoppingList.getValue();
                    assert requiredIngredients != null;
                    requiredIngredients.clear();
                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                        requiredIngredients.add(getShoppingListEntryFromDoc(doc));
                    }

                    shoppingList.postValue(requiredIngredients);
        });
    }

    @Override
    public void setChecked(RecipeIngredientMember ingredient) {
        availableIngredientsCollection
                .document(getIdFromIngredient(ingredient))
                .update("isChecked", false);
    }

    @Override
    public void setUnChecked(RecipeIngredientMember ingredient) {
        availableIngredientsCollection
                .document(getIdFromIngredient(ingredient))
                .update("isChecked", false);
    }

    static String getIdFromIngredient(RecipeIngredientMember ingredient) {
        return ingredient.getDescription() + ":" + ingredient.getUnit();
    }
}
