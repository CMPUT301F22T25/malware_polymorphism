package com.CMPUT301F22T25.malwarepolymorphism.features.shoppinglist.data;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.data.IngredientAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;
import com.CMPUT301F22T25.malwarepolymorphism.features.shoppinglist.domain.data.ShoppingListRepository;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

public class FirebaseShoppingListRepository implements ShoppingListRepository {
    final FirebaseFirestore database;
    final CollectionReference availableIngredientsCollection;
    private final MutableLiveData<List<RecipeIngredientMember>> shoppingList;

    @Inject
    public FirebaseShoppingListRepository() {
        shoppingList = new MutableLiveData<>(new ArrayList<>());
        database = FirebaseFirestore.getInstance();
        availableIngredientsCollection = database.collection("AvailableIngredients");

        availableIngredientsCollection.whereLessThan("amount", 0).addSnapshotListener((queryDocumentSnapshots, error) -> {
            if (queryDocumentSnapshots == null)
                return;

            List<RecipeIngredientMember> requiredIngredients = shoppingList.getValue();
            assert requiredIngredients != null;
            requiredIngredients.clear();
            for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                requiredIngredients.add(getIngredientFromDoc(doc));
            }

            shoppingList.postValue(requiredIngredients);
        });
    }


    private RecipeIngredientMember getIngredientFromDoc(QueryDocumentSnapshot doc) {
        return new RecipeIngredientMember(
                doc.getString("description"),
                Math.abs(doc.getLong("amount")),
                doc.getString("unit"),
                doc.getString("category")
        );
    }

    @Override
    public LiveData<List<RecipeIngredientMember>> getShoppingList() {
        return shoppingList;
    }

    @Override
    public void addIngredient(RecipeIngredientMember ingredient) {
        // if doc with id exists, update it
        // else, create new doc


        DocumentReference docRef = availableIngredientsCollection.document(ingredient.getDescription() + ":" + ingredient.getUnit());
        docRef.get().addOnSuccessListener(documentSnapshot -> {
            if (documentSnapshot.exists()) {
                docRef.update("amount", documentSnapshot.getLong("amount") + ingredient.getAmount());
            } else {
                docRef.set(ingredient.toHashMap());
            }
        });
    }

    @Override
    public void addRequiredIngredient(RecipeIngredientMember ingredient) {
        DocumentReference docRef = availableIngredientsCollection.document(ingredient.getDescription() + ":" + ingredient.getUnit());
        docRef.get().addOnSuccessListener(documentSnapshot -> {
            if (documentSnapshot.exists()) {
                docRef.update("amount", documentSnapshot.getLong("amount") - ingredient.getAmount());
            } else {
                HashMap<String, Object> data = ingredient.toHashMap();
                data.put("amount", -ingredient.getAmount());
                docRef.update(data);
            }
        });
    }

    @Override
    public void addRequiredIngredients(List<RecipeIngredientMember> ingredients) {
        for (RecipeIngredientMember ingredient : ingredients) {
            addRequiredIngredient(ingredient);
        }
    }

    @Override
    public void removeIngredient(RecipeIngredientMember ingredient) {
        addRequiredIngredient(ingredient);
    }

    @Override
    public void removeRequiredIngredient(RecipeIngredientMember ingredients) {
        addIngredient(ingredients);
    }

    @Override
    public void removeRequiredIngredients(List<RecipeIngredientMember> ingredients) {
        for (RecipeIngredientMember ingredient : ingredients) {
            removeRequiredIngredient(ingredient);
        }
    }

    @Override
    public void modifyIngredient(RecipeIngredientMember oldIngredient, RecipeIngredientMember newIngredient) {
        String oldId = oldIngredient.getDescription() + ":" + oldIngredient.getUnit();
        String newId = newIngredient.getDescription() + ":" + newIngredient.getUnit();
        if (oldId.equals(newId)) {
            DocumentReference docRef = availableIngredientsCollection.document(oldId);
            docRef.get().addOnSuccessListener(documentSnapshot -> {
                if (documentSnapshot.exists()) {
                    docRef.update("amount", documentSnapshot.getLong("amount") + (newIngredient.getAmount() - oldIngredient.getAmount()));
                }
            });
        } else {
            availableIngredientsCollection.document(oldId).delete();
            availableIngredientsCollection.document(newId).set(newIngredient.toHashMap());
        }
    }
}
