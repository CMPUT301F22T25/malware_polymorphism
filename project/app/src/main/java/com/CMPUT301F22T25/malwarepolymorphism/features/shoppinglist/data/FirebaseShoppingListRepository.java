package com.CMPUT301F22T25.malwarepolymorphism.features.shoppinglist.data;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.CMPUT301F22T25.malwarepolymorphism.features.ingredients.domain.entities.Ingredient;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;
import com.CMPUT301F22T25.malwarepolymorphism.features.shoppinglist.domain.data.ShoppingListRepository;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.HashMap;
import java.util.List;

public class FirebaseShoppingListRepository implements ShoppingListRepository {
    final FirebaseFirestore database;
    final CollectionReference requiredIngredientsCollection;
    final CollectionReference availableIngredientsCollection;
    private final MutableLiveData<List<RecipeIngredientMember>> shoppingList;

    public FirebaseShoppingListRepository() {
        shoppingList = new MutableLiveData<>();
        database = FirebaseFirestore.getInstance();
        requiredIngredientsCollection = database.collection("RequiredIngredients");
        availableIngredientsCollection = database.collection("AvailableIngredients");

        requiredIngredientsCollection.addSnapshotListener((queryDocumentSnapshots, error) -> {
            if (queryDocumentSnapshots == null)
                return;

            List<RecipeIngredientMember> requiredIngredients = shoppingList.getValue();
            assert requiredIngredients != null;
            requiredIngredients.clear();
            for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                requiredIngredients.add(getIngredientFromDoc(doc));
            }

            shoppingList.postValue(requiredIngredients);
        });
    }


    private RecipeIngredientMember getIngredientFromDoc(QueryDocumentSnapshot doc) {
        return new RecipeIngredientMember(
                doc.getString("description"),
                doc.getLong("amount"),
                doc.getString("unit"),
                doc.getString("category")
        );
    }

    @Override
    public LiveData<List<RecipeIngredientMember>> getShoppingList() {
        return shoppingList;
    }

    @Override
    public void addIngredient(RecipeIngredientMember ingredient) {
        requiredIngredientsCollection.whereEqualTo("description", ingredient.getDescription()).whereEqualTo("unit", ingredient.getUnit()).get().addOnSuccessListener(queryDocumentSnapshots -> {
            if (queryDocumentSnapshots.size() > 0) {
                QueryDocumentSnapshot doc = (QueryDocumentSnapshot) queryDocumentSnapshots.getDocuments().get(0);
                long amount = doc.getLong("amount");
                amount -= ingredient.getAmount();
                if (amount == 0) {
                    requiredIngredientsCollection.document(doc.getId()).delete();
                } else if (amount < 0) {
                    amount = Math.abs(amount);
                    requiredIngredientsCollection.document(doc.getId()).delete();
                    ingredient.setAmount(amount);
                    addToAvailable(ingredient);
                } else {
                    HashMap<String, Object> data = new HashMap<>();
                    data.put("amount", amount);
                    requiredIngredientsCollection.document(doc.getId()).update(data);
                }
            } else {
                // ingredient in availableIngredientsCollection then increment amount
                addToAvailable(ingredient);
            }
        });
    }

    @Override
    public void addRequiredIngredients(List<RecipeIngredientMember> ingredients) {
        for (RecipeIngredientMember ingredient : ingredients) {
            addIngredient(ingredient);
        }
    }

    @Override
    public void removeIngredient(RecipeIngredientMember ingredient) {

    }

    @Override
    public void removeRequiredIngredients(List<RecipeIngredientMember> ingredients) {

    }

    private void addToAvailable(RecipeIngredientMember ingredient) {
        availableIngredientsCollection.whereEqualTo("description", ingredient.getDescription()).whereEqualTo("unit", ingredient.getUnit()).get().addOnSuccessListener(queryDocumentSnapshots -> {
            if (queryDocumentSnapshots.size() > 0) {
                QueryDocumentSnapshot doc = (QueryDocumentSnapshot) queryDocumentSnapshots.getDocuments().get(0);
                long amount = doc.getLong("amount");
                amount += ingredient.getAmount();
                HashMap<String, Object> data = new HashMap<>();
                data.put("amount", amount);
                availableIngredientsCollection.document(doc.getId()).update(data);
            } else {
                // ingredient not in availableIngredientsCollection then add to availableIngredientsCollection
                availableIngredientsCollection.add(ingredient.toHashMap());
            }
        });
    }
}
