package com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.UI;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.CMPUT301F22T25.malwarepolymorphism.R;
import com.CMPUT301F22T25.malwarepolymorphism.databinding.FragmentMealPlanCardBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.common.RecyclerViewOnItemEditViewClickHandler;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlan;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.List;

public class MealPlanListRecyclerViewAdapter extends RecyclerView.Adapter<MealPlanListRecyclerViewAdapter.ViewHolder>{
    private List<MealPlan> mealPlans;
    private final RecyclerViewOnItemEditViewClickHandler clickHandler;

    public MealPlanListRecyclerViewAdapter(List<MealPlan> mealPlans, RecyclerViewOnItemEditViewClickHandler clickHandler) {
        this.clickHandler = clickHandler;
        this.mealPlans = mealPlans;
    }

    void setMealPlans(List<MealPlan> mealPlans) {
        this.mealPlans = mealPlans;
    }

    public static class ViewHolder extends RecyclerView.ViewHolder {
        private final FragmentMealPlanCardBinding binding;

        public ViewHolder(View view) {
            super(view);
            binding = FragmentMealPlanCardBinding.bind(view);
        }
    }

    @NonNull
    @Override
    public MealPlanListRecyclerViewAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(
                R.layout.fragment_meal_plan_card, parent, false);
        return new MealPlanListRecyclerViewAdapter.ViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull MealPlanListRecyclerViewAdapter.ViewHolder holder, int position) {
        MealPlan mealPlan = mealPlans.get(position);
        holder.binding.titleTextField.setText(mealPlan.getTitle());

        // set servings text.
        String servingsText = mealPlan.getNumberOfServings() + " serving"
                + ((mealPlan.getNumberOfServings() > 1) ? "s" : "");
        holder.binding.servingsTextField.setText(servingsText);

        // Logic to add/hide the date and week start time.
        if (position <= 0)
            return;
        if (areForSameDay(mealPlan, mealPlans.get(position-1)))
            holder.binding.mealPlanDate.setVisibility(View.INVISIBLE);
    }

    @Override
    public void onViewRecycled(@NonNull ViewHolder holder) {
        super.onViewRecycled(holder);
    }

    @Override
    public int getItemCount() {
        return mealPlans.size();
    }

    boolean areForSameDay(MealPlan mp1, MealPlan mp2) {
        long day1 = mp1.getDate().atZone(ZoneId.systemDefault()).toLocalDate().toEpochDay();
        long day2 = mp2.getDate().atZone(ZoneId.systemDefault()).toLocalDate().toEpochDay();
        return day1 == day2;
    }
}
