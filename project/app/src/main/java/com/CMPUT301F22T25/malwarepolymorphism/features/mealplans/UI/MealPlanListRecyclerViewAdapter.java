package com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.UI;

import android.annotation.SuppressLint;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.CMPUT301F22T25.malwarepolymorphism.R;
import com.CMPUT301F22T25.malwarepolymorphism.databinding.FragmentMealPlanCardBinding;
import com.CMPUT301F22T25.malwarepolymorphism.features.common.RecyclerViewOnItemClickHandler;
import com.CMPUT301F22T25.malwarepolymorphism.features.common.RecyclerViewOnItemEditViewClickHandler;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlan;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Locale;

public class MealPlanListRecyclerViewAdapter extends RecyclerView.Adapter<MealPlanListRecyclerViewAdapter.ViewHolder>{
    private List<MealPlan> mealPlans;
    private final RecyclerViewOnItemClickHandler clickHandler;

    public MealPlanListRecyclerViewAdapter(List<MealPlan> mealPlans, RecyclerViewOnItemClickHandler clickHandler) {
        this.clickHandler = clickHandler;
        this.mealPlans = mealPlans;
    }

    void setMealPlans(List<MealPlan> mealPlans) {
        this.mealPlans = mealPlans;
    }

    public static class ViewHolder extends RecyclerView.ViewHolder {
        private final FragmentMealPlanCardBinding binding;

        public ViewHolder(View view) {
            super(view);
            binding = FragmentMealPlanCardBinding.bind(view);
        }
    }

    @NonNull
    @Override
    public MealPlanListRecyclerViewAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(
                R.layout.fragment_meal_plan_card, parent, false);
        return new MealPlanListRecyclerViewAdapter.ViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull MealPlanListRecyclerViewAdapter.ViewHolder holder, int position) {
        MealPlan mealPlan = mealPlans.get(position);
        holder.binding.titleTextField.setText(mealPlan.getTitle());

        // set servings text.
        String servingsText = mealPlan.getNumberOfServings() + " serving"
                + ((mealPlan.getNumberOfServings() > 1) ? "s" : "");
        holder.binding.servingsTextField.setText(getCompleteDateString(getMealPlanLocalDate(mealPlan)));

        LocalDate mealPlanDate = getMealPlanLocalDate(mealPlan);
        // Logic to add/hide the date and week start time.
        if (position <= 0) {
            showMealPlanDate(holder, mealPlanDate);
            showMealPlanWeekHeader(holder, mealPlanDate);
            return;
        }
        LocalDate previousPlanDate = getMealPlanLocalDate(mealPlans.get(position-1));
        if (mealPlanDate.toEpochDay() != previousPlanDate.toEpochDay())
            showMealPlanDate(holder, mealPlanDate);

        if (getWeekStartDate(previousPlanDate).toEpochDay() !=
                getWeekStartDate(mealPlanDate).toEpochDay())
            showMealPlanWeekHeader(holder, mealPlanDate);
    }

    @Override
    public void onViewRecycled(@NonNull ViewHolder holder) {
        holder.binding.mealPlanDate.setVisibility(View.INVISIBLE);
        holder.binding.weekTextField.setVisibility(View.GONE);
        super.onViewRecycled(holder);
    }

    @Override
    public int getItemCount() {
        return mealPlans.size();
    }

    LocalDate getMealPlanLocalDate(MealPlan mealPlan) {
        return mealPlan.getDate().atZone(ZoneId.ofOffset("", ZoneOffset.UTC)).toLocalDate();
    }

    @SuppressLint("SetTextI18n")
    static void showMealPlanDate(MealPlanListRecyclerViewAdapter.ViewHolder holder, LocalDate mealPlanDate) {
        holder.binding.mealPlanDate.setVisibility(View.VISIBLE);
        holder.binding.mealPlanDateMonth.setText(getDateString(mealPlanDate));
        holder.binding.mealPlanDateDay.setText(String.valueOf(mealPlanDate.getDayOfMonth()));
    }

    static void showMealPlanWeekHeader(MealPlanListRecyclerViewAdapter.ViewHolder holder, LocalDate mealPlanDate) {
        holder.binding.weekTextField.setVisibility(View.VISIBLE);
        String weekString = getCompleteDateString(getWeekStartDate(mealPlanDate)) + " - " + getCompleteDateString(getWeekEndDate(mealPlanDate));
        holder.binding.weekTextField.setText(weekString);
    }

    static LocalDate getWeekStartDate(LocalDate mealPlanDate) {
        if (mealPlanDate.getDayOfWeek().getValue() == 7)
            return mealPlanDate;
        return mealPlanDate.minus(mealPlanDate.getDayOfWeek().getValue(), ChronoUnit.DAYS);
    }

    static LocalDate getWeekEndDate(LocalDate mealPlanDate) {
        if (mealPlanDate.getDayOfWeek().getValue() == 7)
            return mealPlanDate.plus(6, ChronoUnit.DAYS);
        return mealPlanDate.plus(6 - mealPlanDate.getDayOfWeek().getValue(), ChronoUnit.DAYS);
    }

    static String getDateString(LocalDate date) {
        String monthString = date.getMonth().toString();
        return monthString.charAt(0) + monthString.substring(1, 3).toLowerCase(Locale.ROOT);
    }

    static String getCompleteDateString(LocalDate date) {
        return date.getDayOfMonth() + " " + getDateString(date);
    }
}
