package com.CMPUT301F22T25.malwarepolymorphism;

import static org.junit.jupiter.api.Assertions.*;

import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;

import org.junit.Test;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

public class RecipeAttributeBundleTest {

    @Test
    public void testRecipe() {
        //test if initialization and getters work for RecipeIngredientMember
        RecipeIngredientMember mockIngredient = new RecipeIngredientMember("TestDescIngredient", 1, "TestUnitIngredient", "TestCategoryIngredient");
        List<RecipeIngredientMember> listOfIngredient = Arrays.asList(mockIngredient);
        assertEquals("TestDescIngredient", mockIngredient.getDescription());
        assertEquals(1, mockIngredient.getAmount());
        assertEquals("TestUnitIngredient", mockIngredient.getUnit());
        assertEquals("TestCategoryIngredient", mockIngredient.getCategory());

        //test setters of RecipeIngredientMember
        mockIngredient.setDescription("TestDI");
        mockIngredient.setAmount(2);
        mockIngredient.setUnit("TestUI");
        mockIngredient.setCategory("TestCI");

        //confirm setters work
        assertEquals("TestDI", mockIngredient.getDescription());
        assertEquals(2, mockIngredient.getAmount());
        assertEquals("TestUI", mockIngredient.getUnit());
        assertEquals("TestCI", mockIngredient.getCategory());

        //test if initialization and getters work for RecipeAttributeBundle
        RecipeAttributeBundle mockRecipe = new RecipeAttributeBundle("TestTitleRecipe", 50, 2, "TestCategoryRecipe", "TestCommentRecipe", "Blank", listOfIngredient);
        assertEquals("TestTitleRecipe", mockRecipe.getTitle());
        assertEquals(50, mockRecipe.getPreparationTime());
        assertEquals(2, mockRecipe.getNumberOfServings());
        assertEquals("TestCategoryRecipe", mockRecipe.getCategory());
        assertEquals("TestCommentRecipe", mockRecipe.getComment());
        assertEquals("Blank", mockRecipe.getImageUrl());
        assertEquals(listOfIngredient, mockRecipe.getIngredients());

        //test setters of RecipeAttributeBundle
        mockRecipe.setTitle("TestTitle");
        mockRecipe.setPreparationTime(60);
        mockRecipe.setNumberOfServings(5);
        mockRecipe.setCategory("TestCategory");
        mockRecipe.setComment("TestComment");
        mockRecipe.setImageUrl("Blank1");
        RecipeIngredientMember mockIngredient2 = new RecipeIngredientMember("TestDI2", 1, "TestUI2", "TestCI2");
        listOfIngredient = Arrays.asList(mockIngredient2);
        mockRecipe.setIngredients(listOfIngredient);

        //confirm setters work
        assertEquals("TestTitle", mockRecipe.getTitle());
        assertEquals(60, mockRecipe.getPreparationTime());
        assertEquals(5, mockRecipe.getNumberOfServings());
        assertEquals("TestCategory", mockRecipe.getCategory());
        assertEquals("TestComment", mockRecipe.getComment());
        assertEquals("Blank1", mockRecipe.getImageUrl());
        assertEquals(listOfIngredient, mockRecipe.getIngredients());

        assertEquals("TestDI2", mockIngredient2.getDescription());
        assertEquals(1, mockIngredient2.getAmount());
        assertEquals("TestUI2", mockIngredient2.getUnit());
        assertEquals("TestCI2", mockIngredient2.getCategory());
    }

}