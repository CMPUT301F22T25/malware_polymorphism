package com.CMPUT301F22T25.malwarepolymorphism;

import static org.junit.jupiter.api.Assertions.*;

import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.data.MealPlanAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.mealplans.domain.entities.MealPlanRecipeMember;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.data.RecipeAttributeBundle;
import com.CMPUT301F22T25.malwarepolymorphism.features.recipes.domain.entities.RecipeIngredientMember;

import org.junit.Test;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

public class MealPlanAttributeBundleTest {

    @Test
    public void testMealPlan() {
        //functionality of RecipeIngredientMember already tested in RecipeAttributeBundleTest
        RecipeIngredientMember mockIngredient = new RecipeIngredientMember("TestDescIngredient", 3, "TestUnitIngredient", "TestCategoryIngredient");
        RecipeIngredientMember mockIngredient2 = new RecipeIngredientMember("TestDescIngredient2", 2, "TestUnitIngredient2", "TestCategoryIngredient2");
        List<RecipeIngredientMember> listOfIngredient = Arrays.asList(mockIngredient, mockIngredient2);

        //test initialization of MealPlanRecipeMember
        MealPlanRecipeMember mockRecipe = new MealPlanRecipeMember("TestTitleRecipe", 20, 1, "TestUrl1", listOfIngredient);

        assertEquals("TestTitleRecipe", mockRecipe.getTitle());
        assertEquals(20, mockRecipe.getPreparationTimeInMinutes());
        assertEquals(1, mockRecipe.getNumberOfServings());
        assertEquals("TestUrl1", mockRecipe.getImageUrl());
        assertEquals(listOfIngredient, mockRecipe.getIngredients());

        //test setters of MealPlanRecipeMember
        mockRecipe.setTitle("TestTR1");
        mockRecipe.setPreparationTimeInMinutes(25);
        mockRecipe.setNumberOfServings(2);
        mockRecipe.setImageUrl("TestURL2");
        mockIngredient2 = new RecipeIngredientMember("TestDI1", 2, "TestUI2", "TestCI2");
        listOfIngredient = Arrays.asList(mockIngredient, mockIngredient2);
        mockRecipe.setIngredients(listOfIngredient);


        assertEquals("TestTR1", mockRecipe.getTitle());
        assertEquals(25, mockRecipe.getPreparationTimeInMinutes());
        assertEquals(2, mockRecipe.getNumberOfServings());
        assertEquals("TestURL2", mockRecipe.getImageUrl());
        assertEquals(listOfIngredient, mockRecipe.getIngredients());

        //add recipe above as part of a meal plan
        List<MealPlanRecipeMember> listOfRecipe = Arrays.asList(mockRecipe);

        //test initialization of MealPlanAttributeBundle
        MealPlanAttributeBundle mockMealPlan = new MealPlanAttributeBundle("TestTitleMealPlan", 2, Instant.now(), listOfRecipe, listOfIngredient);
        assertEquals("TestTitleMealPlan", mockMealPlan.getTitle());
        assertEquals(2, mockMealPlan.getNumberOfServings());
        assertNotNull(mockMealPlan.getDate());
        assertEquals(listOfRecipe, mockMealPlan.getRecipes());
        assertEquals(listOfIngredient, mockMealPlan.getIngredients());

        //test setters
        Instant timestamp = Instant.now();
        mockMealPlan.setTitle("TestTMP");
        mockMealPlan.setNumberOfServings(3);
        mockMealPlan.setDate(timestamp);

        MealPlanRecipeMember mockRecipe2 = new MealPlanRecipeMember("TestTitleRecipe2", 30, 2, "TestUrl2", listOfIngredient);
        listOfRecipe = Arrays.asList(mockRecipe, mockRecipe2);
        mockMealPlan.setRecipes(listOfRecipe);

        RecipeIngredientMember mockIngredient3 = new RecipeIngredientMember("TestDescIngredient3", 1, "TestUnitIngredient3", "TestCategoryIngredient3");
        listOfIngredient = Arrays.asList(mockIngredient, mockIngredient2, mockIngredient3);
        mockMealPlan.setIngredients(listOfIngredient);

        assertEquals("TestTMP", mockMealPlan.getTitle());
        assertEquals(3, mockMealPlan.getNumberOfServings());
        assertEquals(timestamp, mockMealPlan.getDate());
        assertEquals(listOfRecipe, mockMealPlan.getRecipes());
        assertEquals(listOfIngredient, mockMealPlan.getIngredients());

    }
}
